/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UnikraftCloudV1APIClient/model/Certificate_validation.h"

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {



Certificate_validation::Certificate_validation()
{
    m_Attempt = 0;
    m_AttemptIsSet = false;
    m_Next = utility::datetime();
    m_NextIsSet = false;
}

Certificate_validation::~Certificate_validation()
{
}

void Certificate_validation::validate()
{
    // TODO: implement validation
}

web::json::value Certificate_validation::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AttemptIsSet)
    {
        val[utility::conversions::to_string_t(U("attempt"))] = ModelBase::toJson(m_Attempt);
    }
    if(m_NextIsSet)
    {
        val[utility::conversions::to_string_t(U("next"))] = ModelBase::toJson(m_Next);
    }

    return val;
}

bool Certificate_validation::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("attempt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("attempt")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAttempt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAttempt);
            setAttempt(refVal_setAttempt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("next"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("next")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setNext;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNext);
            setNext(refVal_setNext);
        }
    }
    return ok;
}

void Certificate_validation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AttemptIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("attempt")), m_Attempt));
    }
    if(m_NextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("next")), m_Next));
    }
}

bool Certificate_validation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("attempt"))))
    {
        int32_t refVal_setAttempt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("attempt"))), refVal_setAttempt );
        setAttempt(refVal_setAttempt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("next"))))
    {
        utility::datetime refVal_setNext;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("next"))), refVal_setNext );
        setNext(refVal_setNext);
    }
    return ok;
}

int32_t Certificate_validation::getAttempt() const
{
    return m_Attempt;
}

void Certificate_validation::setAttempt(int32_t value)
{
    m_Attempt = value;
    m_AttemptIsSet = true;
}

bool Certificate_validation::attemptIsSet() const
{
    return m_AttemptIsSet;
}

void Certificate_validation::unsetAttempt()
{
    m_AttemptIsSet = false;
}
utility::datetime Certificate_validation::getNext() const
{
    return m_Next;
}

void Certificate_validation::setNext(const utility::datetime& value)
{
    m_Next = value;
    m_NextIsSet = true;
}

bool Certificate_validation::nextIsSet() const
{
    return m_NextIsSet;
}

void Certificate_validation::unsetNext()
{
    m_NextIsSet = false;
}
}
}
}
}


