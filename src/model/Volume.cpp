/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UnikraftCloudV1APIClient/model/Volume.h"

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {



Volume::Volume()
{
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_State = utility::conversions::to_string_t("");
    m_StateIsSet = false;
    m_Uuid = utility::conversions::to_string_t("");
    m_UuidIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Size_mb = 0;
    m_Size_mbIsSet = false;
    m_Attached_toIsSet = false;
    m_Mounted_byIsSet = false;
    m_Persistent = false;
    m_PersistentIsSet = false;
    m_Created_at = utility::datetime();
    m_Created_atIsSet = false;
}

Volume::~Volume()
{
}

void Volume::validate()
{
    // TODO: implement validation
}

web::json::value Volume::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_StateIsSet)
    {
        val[utility::conversions::to_string_t(U("state"))] = ModelBase::toJson(m_State);
    }
    if(m_UuidIsSet)
    {
        val[utility::conversions::to_string_t(U("uuid"))] = ModelBase::toJson(m_Uuid);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Size_mbIsSet)
    {
        val[utility::conversions::to_string_t(U("size_mb"))] = ModelBase::toJson(m_Size_mb);
    }
    if(m_Attached_toIsSet)
    {
        val[utility::conversions::to_string_t(U("attached_to"))] = ModelBase::toJson(m_Attached_to);
    }
    if(m_Mounted_byIsSet)
    {
        val[utility::conversions::to_string_t(U("mounted_by"))] = ModelBase::toJson(m_Mounted_by);
    }
    if(m_PersistentIsSet)
    {
        val[utility::conversions::to_string_t(U("persistent"))] = ModelBase::toJson(m_Persistent);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at"))] = ModelBase::toJson(m_Created_at);
    }

    return val;
}

bool Volume::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("state"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("state")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setState;
            ok &= ModelBase::fromJson(fieldValue, refVal_setState);
            setState(refVal_setState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uuid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uuid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUuid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUuid);
            setUuid(refVal_setUuid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("size_mb"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("size_mb")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSizeMb;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSizeMb);
            setSizeMb(refVal_setSizeMb);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("attached_to"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("attached_to")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Volume_attached_to_inner>> refVal_setAttachedTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAttachedTo);
            setAttachedTo(refVal_setAttachedTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mounted_by"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mounted_by")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Volume_mounted_by_inner>> refVal_setMountedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMountedBy);
            setMountedBy(refVal_setMountedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("persistent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("persistent")));
        if(!fieldValue.is_null())
        {
            bool refVal_setPersistent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPersistent);
            setPersistent(refVal_setPersistent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    return ok;
}

void Volume::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_StateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("state")), m_State));
    }
    if(m_UuidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uuid")), m_Uuid));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_Size_mbIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("size_mb")), m_Size_mb));
    }
    if(m_Attached_toIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("attached_to")), m_Attached_to));
    }
    if(m_Mounted_byIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mounted_by")), m_Mounted_by));
    }
    if(m_PersistentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("persistent")), m_Persistent));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at")), m_Created_at));
    }
}

bool Volume::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("state"))))
    {
        utility::string_t refVal_setState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("state"))), refVal_setState );
        setState(refVal_setState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uuid"))))
    {
        utility::string_t refVal_setUuid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uuid"))), refVal_setUuid );
        setUuid(refVal_setUuid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("size_mb"))))
    {
        int32_t refVal_setSizeMb;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("size_mb"))), refVal_setSizeMb );
        setSizeMb(refVal_setSizeMb);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("attached_to"))))
    {
        std::vector<std::shared_ptr<Volume_attached_to_inner>> refVal_setAttachedTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("attached_to"))), refVal_setAttachedTo );
        setAttachedTo(refVal_setAttachedTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mounted_by"))))
    {
        std::vector<std::shared_ptr<Volume_mounted_by_inner>> refVal_setMountedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mounted_by"))), refVal_setMountedBy );
        setMountedBy(refVal_setMountedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("persistent"))))
    {
        bool refVal_setPersistent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("persistent"))), refVal_setPersistent );
        setPersistent(refVal_setPersistent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    return ok;
}

utility::string_t Volume::getStatus() const
{
    return m_Status;
}

void Volume::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool Volume::statusIsSet() const
{
    return m_StatusIsSet;
}

void Volume::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t Volume::getState() const
{
    return m_State;
}

void Volume::setState(const utility::string_t& value)
{
    m_State = value;
    m_StateIsSet = true;
}

bool Volume::stateIsSet() const
{
    return m_StateIsSet;
}

void Volume::unsetState()
{
    m_StateIsSet = false;
}
utility::string_t Volume::getUuid() const
{
    return m_Uuid;
}

void Volume::setUuid(const utility::string_t& value)
{
    m_Uuid = value;
    m_UuidIsSet = true;
}

bool Volume::uuidIsSet() const
{
    return m_UuidIsSet;
}

void Volume::unsetUuid()
{
    m_UuidIsSet = false;
}
utility::string_t Volume::getName() const
{
    return m_Name;
}

void Volume::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Volume::nameIsSet() const
{
    return m_NameIsSet;
}

void Volume::unsetName()
{
    m_NameIsSet = false;
}
int32_t Volume::getSizeMb() const
{
    return m_Size_mb;
}

void Volume::setSizeMb(int32_t value)
{
    m_Size_mb = value;
    m_Size_mbIsSet = true;
}

bool Volume::sizeMbIsSet() const
{
    return m_Size_mbIsSet;
}

void Volume::unsetSize_mb()
{
    m_Size_mbIsSet = false;
}
std::vector<std::shared_ptr<Volume_attached_to_inner>>& Volume::getAttachedTo()
{
    return m_Attached_to;
}

void Volume::setAttachedTo(const std::vector<std::shared_ptr<Volume_attached_to_inner>>& value)
{
    m_Attached_to = value;
    m_Attached_toIsSet = true;
}

bool Volume::attachedToIsSet() const
{
    return m_Attached_toIsSet;
}

void Volume::unsetAttached_to()
{
    m_Attached_toIsSet = false;
}
std::vector<std::shared_ptr<Volume_mounted_by_inner>>& Volume::getMountedBy()
{
    return m_Mounted_by;
}

void Volume::setMountedBy(const std::vector<std::shared_ptr<Volume_mounted_by_inner>>& value)
{
    m_Mounted_by = value;
    m_Mounted_byIsSet = true;
}

bool Volume::mountedByIsSet() const
{
    return m_Mounted_byIsSet;
}

void Volume::unsetMounted_by()
{
    m_Mounted_byIsSet = false;
}
bool Volume::isPersistent() const
{
    return m_Persistent;
}

void Volume::setPersistent(bool value)
{
    m_Persistent = value;
    m_PersistentIsSet = true;
}

bool Volume::persistentIsSet() const
{
    return m_PersistentIsSet;
}

void Volume::unsetPersistent()
{
    m_PersistentIsSet = false;
}
utility::datetime Volume::getCreatedAt() const
{
    return m_Created_at;
}

void Volume::setCreatedAt(const utility::datetime& value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool Volume::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void Volume::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
}
}
}
}


