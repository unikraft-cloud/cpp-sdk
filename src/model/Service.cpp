/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UnikraftCloudV1APIClient/model/Service.h"

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {



Service::Service()
{
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_Uuid = utility::conversions::to_string_t("");
    m_UuidIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Created_at = utility::datetime();
    m_Created_atIsSet = false;
    m_Persistent = false;
    m_PersistentIsSet = false;
    m_Autoscale = false;
    m_AutoscaleIsSet = false;
    m_Soft_limit = 0;
    m_Soft_limitIsSet = false;
    m_Hard_limit = 0;
    m_Hard_limitIsSet = false;
    m_ServicesIsSet = false;
    m_DomainsIsSet = false;
    m_InstancesIsSet = false;
}

Service::~Service()
{
}

void Service::validate()
{
    // TODO: implement validation
}

web::json::value Service::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_UuidIsSet)
    {
        val[utility::conversions::to_string_t(U("uuid"))] = ModelBase::toJson(m_Uuid);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at"))] = ModelBase::toJson(m_Created_at);
    }
    if(m_PersistentIsSet)
    {
        val[utility::conversions::to_string_t(U("persistent"))] = ModelBase::toJson(m_Persistent);
    }
    if(m_AutoscaleIsSet)
    {
        val[utility::conversions::to_string_t(U("autoscale"))] = ModelBase::toJson(m_Autoscale);
    }
    if(m_Soft_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("soft_limit"))] = ModelBase::toJson(m_Soft_limit);
    }
    if(m_Hard_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("hard_limit"))] = ModelBase::toJson(m_Hard_limit);
    }
    if(m_ServicesIsSet)
    {
        val[utility::conversions::to_string_t(U("services"))] = ModelBase::toJson(m_Services);
    }
    if(m_DomainsIsSet)
    {
        val[utility::conversions::to_string_t(U("domains"))] = ModelBase::toJson(m_Domains);
    }
    if(m_InstancesIsSet)
    {
        val[utility::conversions::to_string_t(U("instances"))] = ModelBase::toJson(m_Instances);
    }

    return val;
}

bool Service::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uuid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uuid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUuid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUuid);
            setUuid(refVal_setUuid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("persistent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("persistent")));
        if(!fieldValue.is_null())
        {
            bool refVal_setPersistent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPersistent);
            setPersistent(refVal_setPersistent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("autoscale"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("autoscale")));
        if(!fieldValue.is_null())
        {
            bool refVal_setAutoscale;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAutoscale);
            setAutoscale(refVal_setAutoscale);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("soft_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("soft_limit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSoftLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSoftLimit);
            setSoftLimit(refVal_setSoftLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hard_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hard_limit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHardLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHardLimit);
            setHardLimit(refVal_setHardLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("services"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("services")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Service_mapping>> refVal_setServices;
            ok &= ModelBase::fromJson(fieldValue, refVal_setServices);
            setServices(refVal_setServices);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("domains"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("domains")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Create_instance_request_service_group_domains_inner>> refVal_setDomains;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDomains);
            setDomains(refVal_setDomains);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("instances"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("instances")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Get_services_200_response_data_service_groups_inner_instances_inner>> refVal_setInstances;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInstances);
            setInstances(refVal_setInstances);
        }
    }
    return ok;
}

void Service::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_UuidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uuid")), m_Uuid));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at")), m_Created_at));
    }
    if(m_PersistentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("persistent")), m_Persistent));
    }
    if(m_AutoscaleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("autoscale")), m_Autoscale));
    }
    if(m_Soft_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("soft_limit")), m_Soft_limit));
    }
    if(m_Hard_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hard_limit")), m_Hard_limit));
    }
    if(m_ServicesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("services")), m_Services));
    }
    if(m_DomainsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("domains")), m_Domains));
    }
    if(m_InstancesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("instances")), m_Instances));
    }
}

bool Service::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uuid"))))
    {
        utility::string_t refVal_setUuid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uuid"))), refVal_setUuid );
        setUuid(refVal_setUuid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("persistent"))))
    {
        bool refVal_setPersistent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("persistent"))), refVal_setPersistent );
        setPersistent(refVal_setPersistent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("autoscale"))))
    {
        bool refVal_setAutoscale;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("autoscale"))), refVal_setAutoscale );
        setAutoscale(refVal_setAutoscale);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("soft_limit"))))
    {
        int32_t refVal_setSoftLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("soft_limit"))), refVal_setSoftLimit );
        setSoftLimit(refVal_setSoftLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hard_limit"))))
    {
        int32_t refVal_setHardLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hard_limit"))), refVal_setHardLimit );
        setHardLimit(refVal_setHardLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("services"))))
    {
        std::vector<std::shared_ptr<Service_mapping>> refVal_setServices;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("services"))), refVal_setServices );
        setServices(refVal_setServices);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("domains"))))
    {
        std::vector<std::shared_ptr<Create_instance_request_service_group_domains_inner>> refVal_setDomains;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("domains"))), refVal_setDomains );
        setDomains(refVal_setDomains);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("instances"))))
    {
        std::vector<std::shared_ptr<Get_services_200_response_data_service_groups_inner_instances_inner>> refVal_setInstances;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("instances"))), refVal_setInstances );
        setInstances(refVal_setInstances);
    }
    return ok;
}

utility::string_t Service::getStatus() const
{
    return m_Status;
}

void Service::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool Service::statusIsSet() const
{
    return m_StatusIsSet;
}

void Service::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t Service::getUuid() const
{
    return m_Uuid;
}

void Service::setUuid(const utility::string_t& value)
{
    m_Uuid = value;
    m_UuidIsSet = true;
}

bool Service::uuidIsSet() const
{
    return m_UuidIsSet;
}

void Service::unsetUuid()
{
    m_UuidIsSet = false;
}
utility::string_t Service::getName() const
{
    return m_Name;
}

void Service::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Service::nameIsSet() const
{
    return m_NameIsSet;
}

void Service::unsetName()
{
    m_NameIsSet = false;
}
utility::datetime Service::getCreatedAt() const
{
    return m_Created_at;
}

void Service::setCreatedAt(const utility::datetime& value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool Service::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void Service::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
bool Service::isPersistent() const
{
    return m_Persistent;
}

void Service::setPersistent(bool value)
{
    m_Persistent = value;
    m_PersistentIsSet = true;
}

bool Service::persistentIsSet() const
{
    return m_PersistentIsSet;
}

void Service::unsetPersistent()
{
    m_PersistentIsSet = false;
}
bool Service::isAutoscale() const
{
    return m_Autoscale;
}

void Service::setAutoscale(bool value)
{
    m_Autoscale = value;
    m_AutoscaleIsSet = true;
}

bool Service::autoscaleIsSet() const
{
    return m_AutoscaleIsSet;
}

void Service::unsetAutoscale()
{
    m_AutoscaleIsSet = false;
}
int32_t Service::getSoftLimit() const
{
    return m_Soft_limit;
}

void Service::setSoftLimit(int32_t value)
{
    m_Soft_limit = value;
    m_Soft_limitIsSet = true;
}

bool Service::softLimitIsSet() const
{
    return m_Soft_limitIsSet;
}

void Service::unsetSoft_limit()
{
    m_Soft_limitIsSet = false;
}
int32_t Service::getHardLimit() const
{
    return m_Hard_limit;
}

void Service::setHardLimit(int32_t value)
{
    m_Hard_limit = value;
    m_Hard_limitIsSet = true;
}

bool Service::hardLimitIsSet() const
{
    return m_Hard_limitIsSet;
}

void Service::unsetHard_limit()
{
    m_Hard_limitIsSet = false;
}
std::vector<std::shared_ptr<Service_mapping>>& Service::getServices()
{
    return m_Services;
}

void Service::setServices(const std::vector<std::shared_ptr<Service_mapping>>& value)
{
    m_Services = value;
    m_ServicesIsSet = true;
}

bool Service::servicesIsSet() const
{
    return m_ServicesIsSet;
}

void Service::unsetServices()
{
    m_ServicesIsSet = false;
}
std::vector<std::shared_ptr<Create_instance_request_service_group_domains_inner>>& Service::getDomains()
{
    return m_Domains;
}

void Service::setDomains(const std::vector<std::shared_ptr<Create_instance_request_service_group_domains_inner>>& value)
{
    m_Domains = value;
    m_DomainsIsSet = true;
}

bool Service::domainsIsSet() const
{
    return m_DomainsIsSet;
}

void Service::unsetDomains()
{
    m_DomainsIsSet = false;
}
std::vector<std::shared_ptr<Get_services_200_response_data_service_groups_inner_instances_inner>>& Service::getInstances()
{
    return m_Instances;
}

void Service::setInstances(const std::vector<std::shared_ptr<Get_services_200_response_data_service_groups_inner_instances_inner>>& value)
{
    m_Instances = value;
    m_InstancesIsSet = true;
}

bool Service::instancesIsSet() const
{
    return m_InstancesIsSet;
}

void Service::unsetInstances()
{
    m_InstancesIsSet = false;
}
}
}
}
}


