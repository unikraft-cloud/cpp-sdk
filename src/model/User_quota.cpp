/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UnikraftCloudV1APIClient/model/User_quota.h"

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {



User_quota::User_quota()
{
    m_UsedIsSet = false;
    m_HardIsSet = false;
    m_LimitsIsSet = false;
}

User_quota::~User_quota()
{
}

void User_quota::validate()
{
    // TODO: implement validation
}

web::json::value User_quota::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_UsedIsSet)
    {
        val[utility::conversions::to_string_t(U("used"))] = ModelBase::toJson(m_Used);
    }
    if(m_HardIsSet)
    {
        val[utility::conversions::to_string_t(U("hard"))] = ModelBase::toJson(m_Hard);
    }
    if(m_LimitsIsSet)
    {
        val[utility::conversions::to_string_t(U("limits"))] = ModelBase::toJson(m_Limits);
    }

    return val;
}

bool User_quota::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("used"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("used")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<User_quota_used> refVal_setUsed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsed);
            setUsed(refVal_setUsed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hard"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hard")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setHard;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHard);
            setHard(refVal_setHard);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("limits"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limits")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<User_quota_limits> refVal_setLimits;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimits);
            setLimits(refVal_setLimits);
        }
    }
    return ok;
}

void User_quota::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_UsedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("used")), m_Used));
    }
    if(m_HardIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hard")), m_Hard));
    }
    if(m_LimitsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limits")), m_Limits));
    }
}

bool User_quota::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("used"))))
    {
        std::shared_ptr<User_quota_used> refVal_setUsed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("used"))), refVal_setUsed );
        setUsed(refVal_setUsed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hard"))))
    {
        std::shared_ptr<Object> refVal_setHard;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hard"))), refVal_setHard );
        setHard(refVal_setHard);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("limits"))))
    {
        std::shared_ptr<User_quota_limits> refVal_setLimits;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limits"))), refVal_setLimits );
        setLimits(refVal_setLimits);
    }
    return ok;
}

std::shared_ptr<User_quota_used> User_quota::getUsed() const
{
    return m_Used;
}

void User_quota::setUsed(const std::shared_ptr<User_quota_used>& value)
{
    m_Used = value;
    m_UsedIsSet = true;
}

bool User_quota::usedIsSet() const
{
    return m_UsedIsSet;
}

void User_quota::unsetUsed()
{
    m_UsedIsSet = false;
}
std::shared_ptr<Object> User_quota::getHard() const
{
    return m_Hard;
}

void User_quota::setHard(const std::shared_ptr<Object>& value)
{
    m_Hard = value;
    m_HardIsSet = true;
}

bool User_quota::hardIsSet() const
{
    return m_HardIsSet;
}

void User_quota::unsetHard()
{
    m_HardIsSet = false;
}
std::shared_ptr<User_quota_limits> User_quota::getLimits() const
{
    return m_Limits;
}

void User_quota::setLimits(const std::shared_ptr<User_quota_limits>& value)
{
    m_Limits = value;
    m_LimitsIsSet = true;
}

bool User_quota::limitsIsSet() const
{
    return m_LimitsIsSet;
}

void User_quota::unsetLimits()
{
    m_LimitsIsSet = false;
}
}
}
}
}


