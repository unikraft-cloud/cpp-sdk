/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UnikraftCloudV1APIClient/model/Instance_network_interfaces_inner.h"

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {



Instance_network_interfaces_inner::Instance_network_interfaces_inner()
{
    m_Uuid = utility::conversions::to_string_t("");
    m_UuidIsSet = false;
    m_Private_ip = utility::conversions::to_string_t("");
    m_Private_ipIsSet = false;
    m_Mac = utility::conversions::to_string_t("");
    m_MacIsSet = false;
    m_Rx_bytes = 0L;
    m_Rx_bytesIsSet = false;
    m_Rx_packets = 0L;
    m_Rx_packetsIsSet = false;
    m_Tx_bytes = 0L;
    m_Tx_bytesIsSet = false;
    m_Tx_packets = 0L;
    m_Tx_packetsIsSet = false;
}

Instance_network_interfaces_inner::~Instance_network_interfaces_inner()
{
}

void Instance_network_interfaces_inner::validate()
{
    // TODO: implement validation
}

web::json::value Instance_network_interfaces_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_UuidIsSet)
    {
        val[utility::conversions::to_string_t(U("uuid"))] = ModelBase::toJson(m_Uuid);
    }
    if(m_Private_ipIsSet)
    {
        val[utility::conversions::to_string_t(U("private_ip"))] = ModelBase::toJson(m_Private_ip);
    }
    if(m_MacIsSet)
    {
        val[utility::conversions::to_string_t(U("mac"))] = ModelBase::toJson(m_Mac);
    }
    if(m_Rx_bytesIsSet)
    {
        val[utility::conversions::to_string_t(U("rx_bytes"))] = ModelBase::toJson(m_Rx_bytes);
    }
    if(m_Rx_packetsIsSet)
    {
        val[utility::conversions::to_string_t(U("rx_packets"))] = ModelBase::toJson(m_Rx_packets);
    }
    if(m_Tx_bytesIsSet)
    {
        val[utility::conversions::to_string_t(U("tx_bytes"))] = ModelBase::toJson(m_Tx_bytes);
    }
    if(m_Tx_packetsIsSet)
    {
        val[utility::conversions::to_string_t(U("tx_packets"))] = ModelBase::toJson(m_Tx_packets);
    }

    return val;
}

bool Instance_network_interfaces_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("uuid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uuid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUuid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUuid);
            setUuid(refVal_setUuid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("private_ip"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("private_ip")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPrivateIp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrivateIp);
            setPrivateIp(refVal_setPrivateIp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mac"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mac")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMac;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMac);
            setMac(refVal_setMac);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rx_bytes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rx_bytes")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setRxBytes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRxBytes);
            setRxBytes(refVal_setRxBytes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rx_packets"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rx_packets")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setRxPackets;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRxPackets);
            setRxPackets(refVal_setRxPackets);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tx_bytes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tx_bytes")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTxBytes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTxBytes);
            setTxBytes(refVal_setTxBytes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tx_packets"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tx_packets")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTxPackets;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTxPackets);
            setTxPackets(refVal_setTxPackets);
        }
    }
    return ok;
}

void Instance_network_interfaces_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_UuidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uuid")), m_Uuid));
    }
    if(m_Private_ipIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("private_ip")), m_Private_ip));
    }
    if(m_MacIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mac")), m_Mac));
    }
    if(m_Rx_bytesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rx_bytes")), m_Rx_bytes));
    }
    if(m_Rx_packetsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rx_packets")), m_Rx_packets));
    }
    if(m_Tx_bytesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tx_bytes")), m_Tx_bytes));
    }
    if(m_Tx_packetsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tx_packets")), m_Tx_packets));
    }
}

bool Instance_network_interfaces_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("uuid"))))
    {
        utility::string_t refVal_setUuid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uuid"))), refVal_setUuid );
        setUuid(refVal_setUuid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("private_ip"))))
    {
        utility::string_t refVal_setPrivateIp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("private_ip"))), refVal_setPrivateIp );
        setPrivateIp(refVal_setPrivateIp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mac"))))
    {
        utility::string_t refVal_setMac;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mac"))), refVal_setMac );
        setMac(refVal_setMac);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rx_bytes"))))
    {
        int64_t refVal_setRxBytes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rx_bytes"))), refVal_setRxBytes );
        setRxBytes(refVal_setRxBytes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rx_packets"))))
    {
        int64_t refVal_setRxPackets;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rx_packets"))), refVal_setRxPackets );
        setRxPackets(refVal_setRxPackets);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tx_bytes"))))
    {
        int64_t refVal_setTxBytes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tx_bytes"))), refVal_setTxBytes );
        setTxBytes(refVal_setTxBytes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tx_packets"))))
    {
        int64_t refVal_setTxPackets;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tx_packets"))), refVal_setTxPackets );
        setTxPackets(refVal_setTxPackets);
    }
    return ok;
}

utility::string_t Instance_network_interfaces_inner::getUuid() const
{
    return m_Uuid;
}

void Instance_network_interfaces_inner::setUuid(const utility::string_t& value)
{
    m_Uuid = value;
    m_UuidIsSet = true;
}

bool Instance_network_interfaces_inner::uuidIsSet() const
{
    return m_UuidIsSet;
}

void Instance_network_interfaces_inner::unsetUuid()
{
    m_UuidIsSet = false;
}
utility::string_t Instance_network_interfaces_inner::getPrivateIp() const
{
    return m_Private_ip;
}

void Instance_network_interfaces_inner::setPrivateIp(const utility::string_t& value)
{
    m_Private_ip = value;
    m_Private_ipIsSet = true;
}

bool Instance_network_interfaces_inner::privateIpIsSet() const
{
    return m_Private_ipIsSet;
}

void Instance_network_interfaces_inner::unsetPrivate_ip()
{
    m_Private_ipIsSet = false;
}
utility::string_t Instance_network_interfaces_inner::getMac() const
{
    return m_Mac;
}

void Instance_network_interfaces_inner::setMac(const utility::string_t& value)
{
    m_Mac = value;
    m_MacIsSet = true;
}

bool Instance_network_interfaces_inner::macIsSet() const
{
    return m_MacIsSet;
}

void Instance_network_interfaces_inner::unsetMac()
{
    m_MacIsSet = false;
}
int64_t Instance_network_interfaces_inner::getRxBytes() const
{
    return m_Rx_bytes;
}

void Instance_network_interfaces_inner::setRxBytes(int64_t value)
{
    m_Rx_bytes = value;
    m_Rx_bytesIsSet = true;
}

bool Instance_network_interfaces_inner::rxBytesIsSet() const
{
    return m_Rx_bytesIsSet;
}

void Instance_network_interfaces_inner::unsetRx_bytes()
{
    m_Rx_bytesIsSet = false;
}
int64_t Instance_network_interfaces_inner::getRxPackets() const
{
    return m_Rx_packets;
}

void Instance_network_interfaces_inner::setRxPackets(int64_t value)
{
    m_Rx_packets = value;
    m_Rx_packetsIsSet = true;
}

bool Instance_network_interfaces_inner::rxPacketsIsSet() const
{
    return m_Rx_packetsIsSet;
}

void Instance_network_interfaces_inner::unsetRx_packets()
{
    m_Rx_packetsIsSet = false;
}
int64_t Instance_network_interfaces_inner::getTxBytes() const
{
    return m_Tx_bytes;
}

void Instance_network_interfaces_inner::setTxBytes(int64_t value)
{
    m_Tx_bytes = value;
    m_Tx_bytesIsSet = true;
}

bool Instance_network_interfaces_inner::txBytesIsSet() const
{
    return m_Tx_bytesIsSet;
}

void Instance_network_interfaces_inner::unsetTx_bytes()
{
    m_Tx_bytesIsSet = false;
}
int64_t Instance_network_interfaces_inner::getTxPackets() const
{
    return m_Tx_packets;
}

void Instance_network_interfaces_inner::setTxPackets(int64_t value)
{
    m_Tx_packets = value;
    m_Tx_packetsIsSet = true;
}

bool Instance_network_interfaces_inner::txPacketsIsSet() const
{
    return m_Tx_packetsIsSet;
}

void Instance_network_interfaces_inner::unsetTx_packets()
{
    m_Tx_packetsIsSet = false;
}
}
}
}
}


