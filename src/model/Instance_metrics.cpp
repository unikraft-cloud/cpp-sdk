/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UnikraftCloudV1APIClient/model/Instance_metrics.h"

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {



Instance_metrics::Instance_metrics()
{
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_Uuid = utility::conversions::to_string_t("");
    m_UuidIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Rss_bytes = 0L;
    m_Rss_bytesIsSet = false;
    m_Cpu_time_ms = 0L;
    m_Cpu_time_msIsSet = false;
    m_Rx_bytes = 0L;
    m_Rx_bytesIsSet = false;
    m_Rx_packets = 0L;
    m_Rx_packetsIsSet = false;
    m_Tx_bytes = 0L;
    m_Tx_bytesIsSet = false;
    m_Tx_packets = 0L;
    m_Tx_packetsIsSet = false;
    m_Nconns = 0;
    m_NconnsIsSet = false;
    m_Nreqs = 0;
    m_NreqsIsSet = false;
    m_Nqueued = 0;
    m_NqueuedIsSet = false;
    m_Ntotal = 0L;
    m_NtotalIsSet = false;
}

Instance_metrics::~Instance_metrics()
{
}

void Instance_metrics::validate()
{
    // TODO: implement validation
}

web::json::value Instance_metrics::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_UuidIsSet)
    {
        val[utility::conversions::to_string_t(U("uuid"))] = ModelBase::toJson(m_Uuid);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Rss_bytesIsSet)
    {
        val[utility::conversions::to_string_t(U("rss_bytes"))] = ModelBase::toJson(m_Rss_bytes);
    }
    if(m_Cpu_time_msIsSet)
    {
        val[utility::conversions::to_string_t(U("cpu_time_ms"))] = ModelBase::toJson(m_Cpu_time_ms);
    }
    if(m_Rx_bytesIsSet)
    {
        val[utility::conversions::to_string_t(U("rx_bytes"))] = ModelBase::toJson(m_Rx_bytes);
    }
    if(m_Rx_packetsIsSet)
    {
        val[utility::conversions::to_string_t(U("rx_packets"))] = ModelBase::toJson(m_Rx_packets);
    }
    if(m_Tx_bytesIsSet)
    {
        val[utility::conversions::to_string_t(U("tx_bytes"))] = ModelBase::toJson(m_Tx_bytes);
    }
    if(m_Tx_packetsIsSet)
    {
        val[utility::conversions::to_string_t(U("tx_packets"))] = ModelBase::toJson(m_Tx_packets);
    }
    if(m_NconnsIsSet)
    {
        val[utility::conversions::to_string_t(U("nconns"))] = ModelBase::toJson(m_Nconns);
    }
    if(m_NreqsIsSet)
    {
        val[utility::conversions::to_string_t(U("nreqs"))] = ModelBase::toJson(m_Nreqs);
    }
    if(m_NqueuedIsSet)
    {
        val[utility::conversions::to_string_t(U("nqueued"))] = ModelBase::toJson(m_Nqueued);
    }
    if(m_NtotalIsSet)
    {
        val[utility::conversions::to_string_t(U("ntotal"))] = ModelBase::toJson(m_Ntotal);
    }

    return val;
}

bool Instance_metrics::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uuid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uuid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUuid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUuid);
            setUuid(refVal_setUuid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rss_bytes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rss_bytes")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setRssBytes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRssBytes);
            setRssBytes(refVal_setRssBytes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpu_time_ms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpu_time_ms")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setCpuTimeMs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpuTimeMs);
            setCpuTimeMs(refVal_setCpuTimeMs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rx_bytes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rx_bytes")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setRxBytes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRxBytes);
            setRxBytes(refVal_setRxBytes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rx_packets"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rx_packets")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setRxPackets;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRxPackets);
            setRxPackets(refVal_setRxPackets);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tx_bytes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tx_bytes")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTxBytes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTxBytes);
            setTxBytes(refVal_setTxBytes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tx_packets"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tx_packets")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTxPackets;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTxPackets);
            setTxPackets(refVal_setTxPackets);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nconns"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nconns")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNconns;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNconns);
            setNconns(refVal_setNconns);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nreqs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nreqs")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNreqs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNreqs);
            setNreqs(refVal_setNreqs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nqueued"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nqueued")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNqueued;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNqueued);
            setNqueued(refVal_setNqueued);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ntotal"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ntotal")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setNtotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNtotal);
            setNtotal(refVal_setNtotal);
        }
    }
    return ok;
}

void Instance_metrics::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_UuidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uuid")), m_Uuid));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_Rss_bytesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rss_bytes")), m_Rss_bytes));
    }
    if(m_Cpu_time_msIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpu_time_ms")), m_Cpu_time_ms));
    }
    if(m_Rx_bytesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rx_bytes")), m_Rx_bytes));
    }
    if(m_Rx_packetsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rx_packets")), m_Rx_packets));
    }
    if(m_Tx_bytesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tx_bytes")), m_Tx_bytes));
    }
    if(m_Tx_packetsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tx_packets")), m_Tx_packets));
    }
    if(m_NconnsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nconns")), m_Nconns));
    }
    if(m_NreqsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nreqs")), m_Nreqs));
    }
    if(m_NqueuedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nqueued")), m_Nqueued));
    }
    if(m_NtotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ntotal")), m_Ntotal));
    }
}

bool Instance_metrics::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uuid"))))
    {
        utility::string_t refVal_setUuid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uuid"))), refVal_setUuid );
        setUuid(refVal_setUuid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rss_bytes"))))
    {
        int64_t refVal_setRssBytes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rss_bytes"))), refVal_setRssBytes );
        setRssBytes(refVal_setRssBytes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpu_time_ms"))))
    {
        int64_t refVal_setCpuTimeMs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpu_time_ms"))), refVal_setCpuTimeMs );
        setCpuTimeMs(refVal_setCpuTimeMs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rx_bytes"))))
    {
        int64_t refVal_setRxBytes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rx_bytes"))), refVal_setRxBytes );
        setRxBytes(refVal_setRxBytes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rx_packets"))))
    {
        int64_t refVal_setRxPackets;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rx_packets"))), refVal_setRxPackets );
        setRxPackets(refVal_setRxPackets);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tx_bytes"))))
    {
        int64_t refVal_setTxBytes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tx_bytes"))), refVal_setTxBytes );
        setTxBytes(refVal_setTxBytes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tx_packets"))))
    {
        int64_t refVal_setTxPackets;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tx_packets"))), refVal_setTxPackets );
        setTxPackets(refVal_setTxPackets);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nconns"))))
    {
        int32_t refVal_setNconns;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nconns"))), refVal_setNconns );
        setNconns(refVal_setNconns);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nreqs"))))
    {
        int32_t refVal_setNreqs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nreqs"))), refVal_setNreqs );
        setNreqs(refVal_setNreqs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nqueued"))))
    {
        int32_t refVal_setNqueued;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nqueued"))), refVal_setNqueued );
        setNqueued(refVal_setNqueued);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ntotal"))))
    {
        int64_t refVal_setNtotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ntotal"))), refVal_setNtotal );
        setNtotal(refVal_setNtotal);
    }
    return ok;
}

utility::string_t Instance_metrics::getStatus() const
{
    return m_Status;
}

void Instance_metrics::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool Instance_metrics::statusIsSet() const
{
    return m_StatusIsSet;
}

void Instance_metrics::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t Instance_metrics::getUuid() const
{
    return m_Uuid;
}

void Instance_metrics::setUuid(const utility::string_t& value)
{
    m_Uuid = value;
    m_UuidIsSet = true;
}

bool Instance_metrics::uuidIsSet() const
{
    return m_UuidIsSet;
}

void Instance_metrics::unsetUuid()
{
    m_UuidIsSet = false;
}
utility::string_t Instance_metrics::getName() const
{
    return m_Name;
}

void Instance_metrics::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Instance_metrics::nameIsSet() const
{
    return m_NameIsSet;
}

void Instance_metrics::unsetName()
{
    m_NameIsSet = false;
}
int64_t Instance_metrics::getRssBytes() const
{
    return m_Rss_bytes;
}

void Instance_metrics::setRssBytes(int64_t value)
{
    m_Rss_bytes = value;
    m_Rss_bytesIsSet = true;
}

bool Instance_metrics::rssBytesIsSet() const
{
    return m_Rss_bytesIsSet;
}

void Instance_metrics::unsetRss_bytes()
{
    m_Rss_bytesIsSet = false;
}
int64_t Instance_metrics::getCpuTimeMs() const
{
    return m_Cpu_time_ms;
}

void Instance_metrics::setCpuTimeMs(int64_t value)
{
    m_Cpu_time_ms = value;
    m_Cpu_time_msIsSet = true;
}

bool Instance_metrics::cpuTimeMsIsSet() const
{
    return m_Cpu_time_msIsSet;
}

void Instance_metrics::unsetCpu_time_ms()
{
    m_Cpu_time_msIsSet = false;
}
int64_t Instance_metrics::getRxBytes() const
{
    return m_Rx_bytes;
}

void Instance_metrics::setRxBytes(int64_t value)
{
    m_Rx_bytes = value;
    m_Rx_bytesIsSet = true;
}

bool Instance_metrics::rxBytesIsSet() const
{
    return m_Rx_bytesIsSet;
}

void Instance_metrics::unsetRx_bytes()
{
    m_Rx_bytesIsSet = false;
}
int64_t Instance_metrics::getRxPackets() const
{
    return m_Rx_packets;
}

void Instance_metrics::setRxPackets(int64_t value)
{
    m_Rx_packets = value;
    m_Rx_packetsIsSet = true;
}

bool Instance_metrics::rxPacketsIsSet() const
{
    return m_Rx_packetsIsSet;
}

void Instance_metrics::unsetRx_packets()
{
    m_Rx_packetsIsSet = false;
}
int64_t Instance_metrics::getTxBytes() const
{
    return m_Tx_bytes;
}

void Instance_metrics::setTxBytes(int64_t value)
{
    m_Tx_bytes = value;
    m_Tx_bytesIsSet = true;
}

bool Instance_metrics::txBytesIsSet() const
{
    return m_Tx_bytesIsSet;
}

void Instance_metrics::unsetTx_bytes()
{
    m_Tx_bytesIsSet = false;
}
int64_t Instance_metrics::getTxPackets() const
{
    return m_Tx_packets;
}

void Instance_metrics::setTxPackets(int64_t value)
{
    m_Tx_packets = value;
    m_Tx_packetsIsSet = true;
}

bool Instance_metrics::txPacketsIsSet() const
{
    return m_Tx_packetsIsSet;
}

void Instance_metrics::unsetTx_packets()
{
    m_Tx_packetsIsSet = false;
}
int32_t Instance_metrics::getNconns() const
{
    return m_Nconns;
}

void Instance_metrics::setNconns(int32_t value)
{
    m_Nconns = value;
    m_NconnsIsSet = true;
}

bool Instance_metrics::nconnsIsSet() const
{
    return m_NconnsIsSet;
}

void Instance_metrics::unsetNconns()
{
    m_NconnsIsSet = false;
}
int32_t Instance_metrics::getNreqs() const
{
    return m_Nreqs;
}

void Instance_metrics::setNreqs(int32_t value)
{
    m_Nreqs = value;
    m_NreqsIsSet = true;
}

bool Instance_metrics::nreqsIsSet() const
{
    return m_NreqsIsSet;
}

void Instance_metrics::unsetNreqs()
{
    m_NreqsIsSet = false;
}
int32_t Instance_metrics::getNqueued() const
{
    return m_Nqueued;
}

void Instance_metrics::setNqueued(int32_t value)
{
    m_Nqueued = value;
    m_NqueuedIsSet = true;
}

bool Instance_metrics::nqueuedIsSet() const
{
    return m_NqueuedIsSet;
}

void Instance_metrics::unsetNqueued()
{
    m_NqueuedIsSet = false;
}
int64_t Instance_metrics::getNtotal() const
{
    return m_Ntotal;
}

void Instance_metrics::setNtotal(int64_t value)
{
    m_Ntotal = value;
    m_NtotalIsSet = true;
}

bool Instance_metrics::ntotalIsSet() const
{
    return m_NtotalIsSet;
}

void Instance_metrics::unsetNtotal()
{
    m_NtotalIsSet = false;
}
}
}
}
}


