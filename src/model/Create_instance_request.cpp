/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UnikraftCloudV1APIClient/model/Create_instance_request.h"

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {



Create_instance_request::Create_instance_request()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Image = utility::conversions::to_string_t("");
    m_ImageIsSet = false;
    m_ArgsIsSet = false;
    m_EnvIsSet = false;
    m_Memory_mb = 0;
    m_Memory_mbIsSet = false;
    m_Restart_policy = utility::conversions::to_string_t("");
    m_Restart_policyIsSet = false;
    m_Scale_to_zeroIsSet = false;
    m_VolumesIsSet = false;
    m_Service_groupIsSet = false;
    m_Autostart = false;
    m_AutostartIsSet = false;
    m_Replicas = 0;
    m_ReplicasIsSet = false;
    m_Wait_timeout_ms = 0;
    m_Wait_timeout_msIsSet = false;
    m_FeaturesIsSet = false;
}

Create_instance_request::~Create_instance_request()
{
}

void Create_instance_request::validate()
{
    // TODO: implement validation
}

web::json::value Create_instance_request::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_ImageIsSet)
    {
        val[utility::conversions::to_string_t(U("image"))] = ModelBase::toJson(m_Image);
    }
    if(m_ArgsIsSet)
    {
        val[utility::conversions::to_string_t(U("args"))] = ModelBase::toJson(m_Args);
    }
    if(m_EnvIsSet)
    {
        val[utility::conversions::to_string_t(U("env"))] = ModelBase::toJson(m_Env);
    }
    if(m_Memory_mbIsSet)
    {
        val[utility::conversions::to_string_t(U("memory_mb"))] = ModelBase::toJson(m_Memory_mb);
    }
    if(m_Restart_policyIsSet)
    {
        val[utility::conversions::to_string_t(U("restart_policy"))] = ModelBase::toJson(m_Restart_policy);
    }
    if(m_Scale_to_zeroIsSet)
    {
        val[utility::conversions::to_string_t(U("scale_to_zero"))] = ModelBase::toJson(m_Scale_to_zero);
    }
    if(m_VolumesIsSet)
    {
        val[utility::conversions::to_string_t(U("volumes"))] = ModelBase::toJson(m_Volumes);
    }
    if(m_Service_groupIsSet)
    {
        val[utility::conversions::to_string_t(U("service_group"))] = ModelBase::toJson(m_Service_group);
    }
    if(m_AutostartIsSet)
    {
        val[utility::conversions::to_string_t(U("autostart"))] = ModelBase::toJson(m_Autostart);
    }
    if(m_ReplicasIsSet)
    {
        val[utility::conversions::to_string_t(U("replicas"))] = ModelBase::toJson(m_Replicas);
    }
    if(m_Wait_timeout_msIsSet)
    {
        val[utility::conversions::to_string_t(U("wait_timeout_ms"))] = ModelBase::toJson(m_Wait_timeout_ms);
    }
    if(m_FeaturesIsSet)
    {
        val[utility::conversions::to_string_t(U("features"))] = ModelBase::toJson(m_Features);
    }

    return val;
}

bool Create_instance_request::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("image"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("image")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImage);
            setImage(refVal_setImage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("args"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("args")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setArgs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setArgs);
            setArgs(refVal_setArgs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("env"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("env")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Create_instance_request_env> refVal_setEnv;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnv);
            setEnv(refVal_setEnv);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("memory_mb"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("memory_mb")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMemoryMb;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemoryMb);
            setMemoryMb(refVal_setMemoryMb);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("restart_policy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("restart_policy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRestartPolicy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRestartPolicy);
            setRestartPolicy(refVal_setRestartPolicy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("scale_to_zero"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("scale_to_zero")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Create_instance_request_scale_to_zero> refVal_setScaleToZero;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScaleToZero);
            setScaleToZero(refVal_setScaleToZero);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("volumes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("volumes")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Create_instance_request_volumes_inner>> refVal_setVolumes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolumes);
            setVolumes(refVal_setVolumes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("service_group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("service_group")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Create_instance_request_service_group> refVal_setServiceGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setServiceGroup);
            setServiceGroup(refVal_setServiceGroup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("autostart"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("autostart")));
        if(!fieldValue.is_null())
        {
            bool refVal_setAutostart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAutostart);
            setAutostart(refVal_setAutostart);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("replicas"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("replicas")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setReplicas;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReplicas);
            setReplicas(refVal_setReplicas);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("wait_timeout_ms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("wait_timeout_ms")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setWaitTimeoutMs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWaitTimeoutMs);
            setWaitTimeoutMs(refVal_setWaitTimeoutMs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("features"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("features")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setFeatures;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeatures);
            setFeatures(refVal_setFeatures);
        }
    }
    return ok;
}

void Create_instance_request::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_ImageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("image")), m_Image));
    }
    if(m_ArgsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("args")), m_Args));
    }
    if(m_EnvIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("env")), m_Env));
    }
    if(m_Memory_mbIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("memory_mb")), m_Memory_mb));
    }
    if(m_Restart_policyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("restart_policy")), m_Restart_policy));
    }
    if(m_Scale_to_zeroIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("scale_to_zero")), m_Scale_to_zero));
    }
    if(m_VolumesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("volumes")), m_Volumes));
    }
    if(m_Service_groupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("service_group")), m_Service_group));
    }
    if(m_AutostartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("autostart")), m_Autostart));
    }
    if(m_ReplicasIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("replicas")), m_Replicas));
    }
    if(m_Wait_timeout_msIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("wait_timeout_ms")), m_Wait_timeout_ms));
    }
    if(m_FeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("features")), m_Features));
    }
}

bool Create_instance_request::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("image"))))
    {
        utility::string_t refVal_setImage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("image"))), refVal_setImage );
        setImage(refVal_setImage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("args"))))
    {
        std::vector<utility::string_t> refVal_setArgs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("args"))), refVal_setArgs );
        setArgs(refVal_setArgs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("env"))))
    {
        std::shared_ptr<Create_instance_request_env> refVal_setEnv;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("env"))), refVal_setEnv );
        setEnv(refVal_setEnv);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("memory_mb"))))
    {
        int32_t refVal_setMemoryMb;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("memory_mb"))), refVal_setMemoryMb );
        setMemoryMb(refVal_setMemoryMb);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("restart_policy"))))
    {
        utility::string_t refVal_setRestartPolicy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("restart_policy"))), refVal_setRestartPolicy );
        setRestartPolicy(refVal_setRestartPolicy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("scale_to_zero"))))
    {
        std::shared_ptr<Create_instance_request_scale_to_zero> refVal_setScaleToZero;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("scale_to_zero"))), refVal_setScaleToZero );
        setScaleToZero(refVal_setScaleToZero);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("volumes"))))
    {
        std::vector<std::shared_ptr<Create_instance_request_volumes_inner>> refVal_setVolumes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("volumes"))), refVal_setVolumes );
        setVolumes(refVal_setVolumes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("service_group"))))
    {
        std::shared_ptr<Create_instance_request_service_group> refVal_setServiceGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("service_group"))), refVal_setServiceGroup );
        setServiceGroup(refVal_setServiceGroup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("autostart"))))
    {
        bool refVal_setAutostart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("autostart"))), refVal_setAutostart );
        setAutostart(refVal_setAutostart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("replicas"))))
    {
        int32_t refVal_setReplicas;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("replicas"))), refVal_setReplicas );
        setReplicas(refVal_setReplicas);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("wait_timeout_ms"))))
    {
        int32_t refVal_setWaitTimeoutMs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("wait_timeout_ms"))), refVal_setWaitTimeoutMs );
        setWaitTimeoutMs(refVal_setWaitTimeoutMs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("features"))))
    {
        std::vector<utility::string_t> refVal_setFeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("features"))), refVal_setFeatures );
        setFeatures(refVal_setFeatures);
    }
    return ok;
}

utility::string_t Create_instance_request::getName() const
{
    return m_Name;
}

void Create_instance_request::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Create_instance_request::nameIsSet() const
{
    return m_NameIsSet;
}

void Create_instance_request::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t Create_instance_request::getImage() const
{
    return m_Image;
}

void Create_instance_request::setImage(const utility::string_t& value)
{
    m_Image = value;
    m_ImageIsSet = true;
}

bool Create_instance_request::imageIsSet() const
{
    return m_ImageIsSet;
}

void Create_instance_request::unsetImage()
{
    m_ImageIsSet = false;
}
std::vector<utility::string_t>& Create_instance_request::getArgs()
{
    return m_Args;
}

void Create_instance_request::setArgs(const std::vector<utility::string_t>& value)
{
    m_Args = value;
    m_ArgsIsSet = true;
}

bool Create_instance_request::argsIsSet() const
{
    return m_ArgsIsSet;
}

void Create_instance_request::unsetArgs()
{
    m_ArgsIsSet = false;
}
std::shared_ptr<Create_instance_request_env> Create_instance_request::getEnv() const
{
    return m_Env;
}

void Create_instance_request::setEnv(const std::shared_ptr<Create_instance_request_env>& value)
{
    m_Env = value;
    m_EnvIsSet = true;
}

bool Create_instance_request::envIsSet() const
{
    return m_EnvIsSet;
}

void Create_instance_request::unsetEnv()
{
    m_EnvIsSet = false;
}
int32_t Create_instance_request::getMemoryMb() const
{
    return m_Memory_mb;
}

void Create_instance_request::setMemoryMb(int32_t value)
{
    m_Memory_mb = value;
    m_Memory_mbIsSet = true;
}

bool Create_instance_request::memoryMbIsSet() const
{
    return m_Memory_mbIsSet;
}

void Create_instance_request::unsetMemory_mb()
{
    m_Memory_mbIsSet = false;
}
utility::string_t Create_instance_request::getRestartPolicy() const
{
    return m_Restart_policy;
}

void Create_instance_request::setRestartPolicy(const utility::string_t& value)
{
    m_Restart_policy = value;
    m_Restart_policyIsSet = true;
}

bool Create_instance_request::restartPolicyIsSet() const
{
    return m_Restart_policyIsSet;
}

void Create_instance_request::unsetRestart_policy()
{
    m_Restart_policyIsSet = false;
}
std::shared_ptr<Create_instance_request_scale_to_zero> Create_instance_request::getScaleToZero() const
{
    return m_Scale_to_zero;
}

void Create_instance_request::setScaleToZero(const std::shared_ptr<Create_instance_request_scale_to_zero>& value)
{
    m_Scale_to_zero = value;
    m_Scale_to_zeroIsSet = true;
}

bool Create_instance_request::scaleToZeroIsSet() const
{
    return m_Scale_to_zeroIsSet;
}

void Create_instance_request::unsetScale_to_zero()
{
    m_Scale_to_zeroIsSet = false;
}
std::vector<std::shared_ptr<Create_instance_request_volumes_inner>>& Create_instance_request::getVolumes()
{
    return m_Volumes;
}

void Create_instance_request::setVolumes(const std::vector<std::shared_ptr<Create_instance_request_volumes_inner>>& value)
{
    m_Volumes = value;
    m_VolumesIsSet = true;
}

bool Create_instance_request::volumesIsSet() const
{
    return m_VolumesIsSet;
}

void Create_instance_request::unsetVolumes()
{
    m_VolumesIsSet = false;
}
std::shared_ptr<Create_instance_request_service_group> Create_instance_request::getServiceGroup() const
{
    return m_Service_group;
}

void Create_instance_request::setServiceGroup(const std::shared_ptr<Create_instance_request_service_group>& value)
{
    m_Service_group = value;
    m_Service_groupIsSet = true;
}

bool Create_instance_request::serviceGroupIsSet() const
{
    return m_Service_groupIsSet;
}

void Create_instance_request::unsetService_group()
{
    m_Service_groupIsSet = false;
}
bool Create_instance_request::isAutostart() const
{
    return m_Autostart;
}

void Create_instance_request::setAutostart(bool value)
{
    m_Autostart = value;
    m_AutostartIsSet = true;
}

bool Create_instance_request::autostartIsSet() const
{
    return m_AutostartIsSet;
}

void Create_instance_request::unsetAutostart()
{
    m_AutostartIsSet = false;
}
int32_t Create_instance_request::getReplicas() const
{
    return m_Replicas;
}

void Create_instance_request::setReplicas(int32_t value)
{
    m_Replicas = value;
    m_ReplicasIsSet = true;
}

bool Create_instance_request::replicasIsSet() const
{
    return m_ReplicasIsSet;
}

void Create_instance_request::unsetReplicas()
{
    m_ReplicasIsSet = false;
}
int32_t Create_instance_request::getWaitTimeoutMs() const
{
    return m_Wait_timeout_ms;
}

void Create_instance_request::setWaitTimeoutMs(int32_t value)
{
    m_Wait_timeout_ms = value;
    m_Wait_timeout_msIsSet = true;
}

bool Create_instance_request::waitTimeoutMsIsSet() const
{
    return m_Wait_timeout_msIsSet;
}

void Create_instance_request::unsetWait_timeout_ms()
{
    m_Wait_timeout_msIsSet = false;
}
std::vector<utility::string_t>& Create_instance_request::getFeatures()
{
    return m_Features;
}

void Create_instance_request::setFeatures(const std::vector<utility::string_t>& value)
{
    m_Features = value;
    m_FeaturesIsSet = true;
}

bool Create_instance_request::featuresIsSet() const
{
    return m_FeaturesIsSet;
}

void Create_instance_request::unsetFeatures()
{
    m_FeaturesIsSet = false;
}
}
}
}
}


