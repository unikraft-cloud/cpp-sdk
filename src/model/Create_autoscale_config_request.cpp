/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UnikraftCloudV1APIClient/model/Create_autoscale_config_request.h"

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {



Create_autoscale_config_request::Create_autoscale_config_request()
{
    m_Uuid = utility::conversions::to_string_t("");
    m_UuidIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Min_size = 0;
    m_Min_sizeIsSet = false;
    m_Max_size = 0;
    m_Max_sizeIsSet = false;
    m_Warmup_time_ms = 0;
    m_Warmup_time_msIsSet = false;
    m_Cooldown_time_ms = 0;
    m_Cooldown_time_msIsSet = false;
    m_MasterIsSet = false;
}

Create_autoscale_config_request::~Create_autoscale_config_request()
{
}

void Create_autoscale_config_request::validate()
{
    // TODO: implement validation
}

web::json::value Create_autoscale_config_request::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_UuidIsSet)
    {
        val[utility::conversions::to_string_t(U("uuid"))] = ModelBase::toJson(m_Uuid);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Min_sizeIsSet)
    {
        val[utility::conversions::to_string_t(U("min_size"))] = ModelBase::toJson(m_Min_size);
    }
    if(m_Max_sizeIsSet)
    {
        val[utility::conversions::to_string_t(U("max_size"))] = ModelBase::toJson(m_Max_size);
    }
    if(m_Warmup_time_msIsSet)
    {
        val[utility::conversions::to_string_t(U("warmup_time_ms"))] = ModelBase::toJson(m_Warmup_time_ms);
    }
    if(m_Cooldown_time_msIsSet)
    {
        val[utility::conversions::to_string_t(U("cooldown_time_ms"))] = ModelBase::toJson(m_Cooldown_time_ms);
    }
    if(m_MasterIsSet)
    {
        val[utility::conversions::to_string_t(U("master"))] = ModelBase::toJson(m_Master);
    }

    return val;
}

bool Create_autoscale_config_request::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("uuid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uuid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUuid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUuid);
            setUuid(refVal_setUuid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("min_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("min_size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMinSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinSize);
            setMinSize(refVal_setMinSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxSize);
            setMaxSize(refVal_setMaxSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("warmup_time_ms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("warmup_time_ms")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setWarmupTimeMs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWarmupTimeMs);
            setWarmupTimeMs(refVal_setWarmupTimeMs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cooldown_time_ms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cooldown_time_ms")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCooldownTimeMs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCooldownTimeMs);
            setCooldownTimeMs(refVal_setCooldownTimeMs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("master"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("master")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Create_autoscale_config_request_master> refVal_setMaster;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaster);
            setMaster(refVal_setMaster);
        }
    }
    return ok;
}

void Create_autoscale_config_request::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_UuidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uuid")), m_Uuid));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_Min_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("min_size")), m_Min_size));
    }
    if(m_Max_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_size")), m_Max_size));
    }
    if(m_Warmup_time_msIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("warmup_time_ms")), m_Warmup_time_ms));
    }
    if(m_Cooldown_time_msIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cooldown_time_ms")), m_Cooldown_time_ms));
    }
    if(m_MasterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("master")), m_Master));
    }
}

bool Create_autoscale_config_request::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("uuid"))))
    {
        utility::string_t refVal_setUuid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uuid"))), refVal_setUuid );
        setUuid(refVal_setUuid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("min_size"))))
    {
        int32_t refVal_setMinSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("min_size"))), refVal_setMinSize );
        setMinSize(refVal_setMinSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_size"))))
    {
        int32_t refVal_setMaxSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_size"))), refVal_setMaxSize );
        setMaxSize(refVal_setMaxSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("warmup_time_ms"))))
    {
        int32_t refVal_setWarmupTimeMs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("warmup_time_ms"))), refVal_setWarmupTimeMs );
        setWarmupTimeMs(refVal_setWarmupTimeMs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cooldown_time_ms"))))
    {
        int32_t refVal_setCooldownTimeMs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cooldown_time_ms"))), refVal_setCooldownTimeMs );
        setCooldownTimeMs(refVal_setCooldownTimeMs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("master"))))
    {
        std::shared_ptr<Create_autoscale_config_request_master> refVal_setMaster;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("master"))), refVal_setMaster );
        setMaster(refVal_setMaster);
    }
    return ok;
}

utility::string_t Create_autoscale_config_request::getUuid() const
{
    return m_Uuid;
}

void Create_autoscale_config_request::setUuid(const utility::string_t& value)
{
    m_Uuid = value;
    m_UuidIsSet = true;
}

bool Create_autoscale_config_request::uuidIsSet() const
{
    return m_UuidIsSet;
}

void Create_autoscale_config_request::unsetUuid()
{
    m_UuidIsSet = false;
}
utility::string_t Create_autoscale_config_request::getName() const
{
    return m_Name;
}

void Create_autoscale_config_request::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Create_autoscale_config_request::nameIsSet() const
{
    return m_NameIsSet;
}

void Create_autoscale_config_request::unsetName()
{
    m_NameIsSet = false;
}
int32_t Create_autoscale_config_request::getMinSize() const
{
    return m_Min_size;
}

void Create_autoscale_config_request::setMinSize(int32_t value)
{
    m_Min_size = value;
    m_Min_sizeIsSet = true;
}

bool Create_autoscale_config_request::minSizeIsSet() const
{
    return m_Min_sizeIsSet;
}

void Create_autoscale_config_request::unsetMin_size()
{
    m_Min_sizeIsSet = false;
}
int32_t Create_autoscale_config_request::getMaxSize() const
{
    return m_Max_size;
}

void Create_autoscale_config_request::setMaxSize(int32_t value)
{
    m_Max_size = value;
    m_Max_sizeIsSet = true;
}

bool Create_autoscale_config_request::maxSizeIsSet() const
{
    return m_Max_sizeIsSet;
}

void Create_autoscale_config_request::unsetMax_size()
{
    m_Max_sizeIsSet = false;
}
int32_t Create_autoscale_config_request::getWarmupTimeMs() const
{
    return m_Warmup_time_ms;
}

void Create_autoscale_config_request::setWarmupTimeMs(int32_t value)
{
    m_Warmup_time_ms = value;
    m_Warmup_time_msIsSet = true;
}

bool Create_autoscale_config_request::warmupTimeMsIsSet() const
{
    return m_Warmup_time_msIsSet;
}

void Create_autoscale_config_request::unsetWarmup_time_ms()
{
    m_Warmup_time_msIsSet = false;
}
int32_t Create_autoscale_config_request::getCooldownTimeMs() const
{
    return m_Cooldown_time_ms;
}

void Create_autoscale_config_request::setCooldownTimeMs(int32_t value)
{
    m_Cooldown_time_ms = value;
    m_Cooldown_time_msIsSet = true;
}

bool Create_autoscale_config_request::cooldownTimeMsIsSet() const
{
    return m_Cooldown_time_msIsSet;
}

void Create_autoscale_config_request::unsetCooldown_time_ms()
{
    m_Cooldown_time_msIsSet = false;
}
std::shared_ptr<Create_autoscale_config_request_master> Create_autoscale_config_request::getMaster() const
{
    return m_Master;
}

void Create_autoscale_config_request::setMaster(const std::shared_ptr<Create_autoscale_config_request_master>& value)
{
    m_Master = value;
    m_MasterIsSet = true;
}

bool Create_autoscale_config_request::masterIsSet() const
{
    return m_MasterIsSet;
}

void Create_autoscale_config_request::unsetMaster()
{
    m_MasterIsSet = false;
}
}
}
}
}


