/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UnikraftCloudV1APIClient/model/Autoscale_config.h"

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {



Autoscale_config::Autoscale_config()
{
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_Uuid = utility::conversions::to_string_t("");
    m_UuidIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Enabled = false;
    m_EnabledIsSet = false;
    m_Min_size = 0;
    m_Min_sizeIsSet = false;
    m_Max_size = 0;
    m_Max_sizeIsSet = false;
    m_Warmup_time_ms = 0;
    m_Warmup_time_msIsSet = false;
    m_Cooldown_time_ms = 0;
    m_Cooldown_time_msIsSet = false;
    m_MasterIsSet = false;
    m_PoliciesIsSet = false;
}

Autoscale_config::~Autoscale_config()
{
}

void Autoscale_config::validate()
{
    // TODO: implement validation
}

web::json::value Autoscale_config::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_UuidIsSet)
    {
        val[utility::conversions::to_string_t(U("uuid"))] = ModelBase::toJson(m_Uuid);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t(U("enabled"))] = ModelBase::toJson(m_Enabled);
    }
    if(m_Min_sizeIsSet)
    {
        val[utility::conversions::to_string_t(U("min_size"))] = ModelBase::toJson(m_Min_size);
    }
    if(m_Max_sizeIsSet)
    {
        val[utility::conversions::to_string_t(U("max_size"))] = ModelBase::toJson(m_Max_size);
    }
    if(m_Warmup_time_msIsSet)
    {
        val[utility::conversions::to_string_t(U("warmup_time_ms"))] = ModelBase::toJson(m_Warmup_time_ms);
    }
    if(m_Cooldown_time_msIsSet)
    {
        val[utility::conversions::to_string_t(U("cooldown_time_ms"))] = ModelBase::toJson(m_Cooldown_time_ms);
    }
    if(m_MasterIsSet)
    {
        val[utility::conversions::to_string_t(U("master"))] = ModelBase::toJson(m_Master);
    }
    if(m_PoliciesIsSet)
    {
        val[utility::conversions::to_string_t(U("policies"))] = ModelBase::toJson(m_Policies);
    }

    return val;
}

bool Autoscale_config::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uuid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uuid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUuid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUuid);
            setUuid(refVal_setUuid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("enabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("enabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_setEnabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnabled);
            setEnabled(refVal_setEnabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("min_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("min_size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMinSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinSize);
            setMinSize(refVal_setMinSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxSize);
            setMaxSize(refVal_setMaxSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("warmup_time_ms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("warmup_time_ms")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setWarmupTimeMs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWarmupTimeMs);
            setWarmupTimeMs(refVal_setWarmupTimeMs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cooldown_time_ms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cooldown_time_ms")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCooldownTimeMs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCooldownTimeMs);
            setCooldownTimeMs(refVal_setCooldownTimeMs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("master"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("master")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Autoscale_config_master> refVal_setMaster;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaster);
            setMaster(refVal_setMaster);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("policies"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("policies")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Autoscale_policy>> refVal_setPolicies;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPolicies);
            setPolicies(refVal_setPolicies);
        }
    }
    return ok;
}

void Autoscale_config::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_UuidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uuid")), m_Uuid));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_EnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("enabled")), m_Enabled));
    }
    if(m_Min_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("min_size")), m_Min_size));
    }
    if(m_Max_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_size")), m_Max_size));
    }
    if(m_Warmup_time_msIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("warmup_time_ms")), m_Warmup_time_ms));
    }
    if(m_Cooldown_time_msIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cooldown_time_ms")), m_Cooldown_time_ms));
    }
    if(m_MasterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("master")), m_Master));
    }
    if(m_PoliciesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("policies")), m_Policies));
    }
}

bool Autoscale_config::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uuid"))))
    {
        utility::string_t refVal_setUuid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uuid"))), refVal_setUuid );
        setUuid(refVal_setUuid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("enabled"))))
    {
        bool refVal_setEnabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("enabled"))), refVal_setEnabled );
        setEnabled(refVal_setEnabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("min_size"))))
    {
        int32_t refVal_setMinSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("min_size"))), refVal_setMinSize );
        setMinSize(refVal_setMinSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_size"))))
    {
        int32_t refVal_setMaxSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_size"))), refVal_setMaxSize );
        setMaxSize(refVal_setMaxSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("warmup_time_ms"))))
    {
        int32_t refVal_setWarmupTimeMs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("warmup_time_ms"))), refVal_setWarmupTimeMs );
        setWarmupTimeMs(refVal_setWarmupTimeMs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cooldown_time_ms"))))
    {
        int32_t refVal_setCooldownTimeMs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cooldown_time_ms"))), refVal_setCooldownTimeMs );
        setCooldownTimeMs(refVal_setCooldownTimeMs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("master"))))
    {
        std::shared_ptr<Autoscale_config_master> refVal_setMaster;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("master"))), refVal_setMaster );
        setMaster(refVal_setMaster);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("policies"))))
    {
        std::vector<std::shared_ptr<Autoscale_policy>> refVal_setPolicies;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("policies"))), refVal_setPolicies );
        setPolicies(refVal_setPolicies);
    }
    return ok;
}

utility::string_t Autoscale_config::getStatus() const
{
    return m_Status;
}

void Autoscale_config::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool Autoscale_config::statusIsSet() const
{
    return m_StatusIsSet;
}

void Autoscale_config::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t Autoscale_config::getUuid() const
{
    return m_Uuid;
}

void Autoscale_config::setUuid(const utility::string_t& value)
{
    m_Uuid = value;
    m_UuidIsSet = true;
}

bool Autoscale_config::uuidIsSet() const
{
    return m_UuidIsSet;
}

void Autoscale_config::unsetUuid()
{
    m_UuidIsSet = false;
}
utility::string_t Autoscale_config::getName() const
{
    return m_Name;
}

void Autoscale_config::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Autoscale_config::nameIsSet() const
{
    return m_NameIsSet;
}

void Autoscale_config::unsetName()
{
    m_NameIsSet = false;
}
bool Autoscale_config::isEnabled() const
{
    return m_Enabled;
}

void Autoscale_config::setEnabled(bool value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}

bool Autoscale_config::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void Autoscale_config::unsetEnabled()
{
    m_EnabledIsSet = false;
}
int32_t Autoscale_config::getMinSize() const
{
    return m_Min_size;
}

void Autoscale_config::setMinSize(int32_t value)
{
    m_Min_size = value;
    m_Min_sizeIsSet = true;
}

bool Autoscale_config::minSizeIsSet() const
{
    return m_Min_sizeIsSet;
}

void Autoscale_config::unsetMin_size()
{
    m_Min_sizeIsSet = false;
}
int32_t Autoscale_config::getMaxSize() const
{
    return m_Max_size;
}

void Autoscale_config::setMaxSize(int32_t value)
{
    m_Max_size = value;
    m_Max_sizeIsSet = true;
}

bool Autoscale_config::maxSizeIsSet() const
{
    return m_Max_sizeIsSet;
}

void Autoscale_config::unsetMax_size()
{
    m_Max_sizeIsSet = false;
}
int32_t Autoscale_config::getWarmupTimeMs() const
{
    return m_Warmup_time_ms;
}

void Autoscale_config::setWarmupTimeMs(int32_t value)
{
    m_Warmup_time_ms = value;
    m_Warmup_time_msIsSet = true;
}

bool Autoscale_config::warmupTimeMsIsSet() const
{
    return m_Warmup_time_msIsSet;
}

void Autoscale_config::unsetWarmup_time_ms()
{
    m_Warmup_time_msIsSet = false;
}
int32_t Autoscale_config::getCooldownTimeMs() const
{
    return m_Cooldown_time_ms;
}

void Autoscale_config::setCooldownTimeMs(int32_t value)
{
    m_Cooldown_time_ms = value;
    m_Cooldown_time_msIsSet = true;
}

bool Autoscale_config::cooldownTimeMsIsSet() const
{
    return m_Cooldown_time_msIsSet;
}

void Autoscale_config::unsetCooldown_time_ms()
{
    m_Cooldown_time_msIsSet = false;
}
std::shared_ptr<Autoscale_config_master> Autoscale_config::getMaster() const
{
    return m_Master;
}

void Autoscale_config::setMaster(const std::shared_ptr<Autoscale_config_master>& value)
{
    m_Master = value;
    m_MasterIsSet = true;
}

bool Autoscale_config::masterIsSet() const
{
    return m_MasterIsSet;
}

void Autoscale_config::unsetMaster()
{
    m_MasterIsSet = false;
}
std::vector<std::shared_ptr<Autoscale_policy>>& Autoscale_config::getPolicies()
{
    return m_Policies;
}

void Autoscale_config::setPolicies(const std::vector<std::shared_ptr<Autoscale_policy>>& value)
{
    m_Policies = value;
    m_PoliciesIsSet = true;
}

bool Autoscale_config::policiesIsSet() const
{
    return m_PoliciesIsSet;
}

void Autoscale_config::unsetPolicies()
{
    m_PoliciesIsSet = false;
}
}
}
}
}


