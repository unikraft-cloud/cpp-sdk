/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UnikraftCloudV1APIClient/model/Get_images_request_inner.h"

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {



Get_images_request_inner::Get_images_request_inner()
{
    m_Digest = utility::conversions::to_string_t("");
    m_DigestIsSet = false;
    m_Tagged = utility::conversions::to_string_t("");
    m_TaggedIsSet = false;
}

Get_images_request_inner::~Get_images_request_inner()
{
}

void Get_images_request_inner::validate()
{
    // TODO: implement validation
}

web::json::value Get_images_request_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DigestIsSet)
    {
        val[utility::conversions::to_string_t(U("digest"))] = ModelBase::toJson(m_Digest);
    }
    if(m_TaggedIsSet)
    {
        val[utility::conversions::to_string_t(U("tagged"))] = ModelBase::toJson(m_Tagged);
    }

    return val;
}

bool Get_images_request_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("digest"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("digest")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDigest;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDigest);
            setDigest(refVal_setDigest);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tagged"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tagged")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTagged;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTagged);
            setTagged(refVal_setTagged);
        }
    }
    return ok;
}

void Get_images_request_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DigestIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("digest")), m_Digest));
    }
    if(m_TaggedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tagged")), m_Tagged));
    }
}

bool Get_images_request_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("digest"))))
    {
        utility::string_t refVal_setDigest;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("digest"))), refVal_setDigest );
        setDigest(refVal_setDigest);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tagged"))))
    {
        utility::string_t refVal_setTagged;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tagged"))), refVal_setTagged );
        setTagged(refVal_setTagged);
    }
    return ok;
}

utility::string_t Get_images_request_inner::getDigest() const
{
    return m_Digest;
}

void Get_images_request_inner::setDigest(const utility::string_t& value)
{
    m_Digest = value;
    m_DigestIsSet = true;
}

bool Get_images_request_inner::digestIsSet() const
{
    return m_DigestIsSet;
}

void Get_images_request_inner::unsetDigest()
{
    m_DigestIsSet = false;
}
utility::string_t Get_images_request_inner::getTagged() const
{
    return m_Tagged;
}

void Get_images_request_inner::setTagged(const utility::string_t& value)
{
    m_Tagged = value;
    m_TaggedIsSet = true;
}

bool Get_images_request_inner::taggedIsSet() const
{
    return m_TaggedIsSet;
}

void Get_images_request_inner::unsetTagged()
{
    m_TaggedIsSet = false;
}
}
}
}
}


