/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UnikraftCloudV1APIClient/model/Create_instance_request_scale_to_zero.h"

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {



Create_instance_request_scale_to_zero::Create_instance_request_scale_to_zero()
{
    m_Policy = utility::conversions::to_string_t("");
    m_PolicyIsSet = false;
    m_Stateful = false;
    m_StatefulIsSet = false;
    m_Cooldown_time_ms = 0;
    m_Cooldown_time_msIsSet = false;
}

Create_instance_request_scale_to_zero::~Create_instance_request_scale_to_zero()
{
}

void Create_instance_request_scale_to_zero::validate()
{
    // TODO: implement validation
}

web::json::value Create_instance_request_scale_to_zero::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PolicyIsSet)
    {
        val[utility::conversions::to_string_t(U("policy"))] = ModelBase::toJson(m_Policy);
    }
    if(m_StatefulIsSet)
    {
        val[utility::conversions::to_string_t(U("stateful"))] = ModelBase::toJson(m_Stateful);
    }
    if(m_Cooldown_time_msIsSet)
    {
        val[utility::conversions::to_string_t(U("cooldown_time_ms"))] = ModelBase::toJson(m_Cooldown_time_ms);
    }

    return val;
}

bool Create_instance_request_scale_to_zero::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("policy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("policy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPolicy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPolicy);
            setPolicy(refVal_setPolicy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stateful"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stateful")));
        if(!fieldValue.is_null())
        {
            bool refVal_setStateful;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStateful);
            setStateful(refVal_setStateful);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cooldown_time_ms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cooldown_time_ms")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCooldownTimeMs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCooldownTimeMs);
            setCooldownTimeMs(refVal_setCooldownTimeMs);
        }
    }
    return ok;
}

void Create_instance_request_scale_to_zero::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PolicyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("policy")), m_Policy));
    }
    if(m_StatefulIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stateful")), m_Stateful));
    }
    if(m_Cooldown_time_msIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cooldown_time_ms")), m_Cooldown_time_ms));
    }
}

bool Create_instance_request_scale_to_zero::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("policy"))))
    {
        utility::string_t refVal_setPolicy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("policy"))), refVal_setPolicy );
        setPolicy(refVal_setPolicy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stateful"))))
    {
        bool refVal_setStateful;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stateful"))), refVal_setStateful );
        setStateful(refVal_setStateful);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cooldown_time_ms"))))
    {
        int32_t refVal_setCooldownTimeMs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cooldown_time_ms"))), refVal_setCooldownTimeMs );
        setCooldownTimeMs(refVal_setCooldownTimeMs);
    }
    return ok;
}

utility::string_t Create_instance_request_scale_to_zero::getPolicy() const
{
    return m_Policy;
}

void Create_instance_request_scale_to_zero::setPolicy(const utility::string_t& value)
{
    m_Policy = value;
    m_PolicyIsSet = true;
}

bool Create_instance_request_scale_to_zero::policyIsSet() const
{
    return m_PolicyIsSet;
}

void Create_instance_request_scale_to_zero::unsetPolicy()
{
    m_PolicyIsSet = false;
}
bool Create_instance_request_scale_to_zero::isStateful() const
{
    return m_Stateful;
}

void Create_instance_request_scale_to_zero::setStateful(bool value)
{
    m_Stateful = value;
    m_StatefulIsSet = true;
}

bool Create_instance_request_scale_to_zero::statefulIsSet() const
{
    return m_StatefulIsSet;
}

void Create_instance_request_scale_to_zero::unsetStateful()
{
    m_StatefulIsSet = false;
}
int32_t Create_instance_request_scale_to_zero::getCooldownTimeMs() const
{
    return m_Cooldown_time_ms;
}

void Create_instance_request_scale_to_zero::setCooldownTimeMs(int32_t value)
{
    m_Cooldown_time_ms = value;
    m_Cooldown_time_msIsSet = true;
}

bool Create_instance_request_scale_to_zero::cooldownTimeMsIsSet() const
{
    return m_Cooldown_time_msIsSet;
}

void Create_instance_request_scale_to_zero::unsetCooldown_time_ms()
{
    m_Cooldown_time_msIsSet = false;
}
}
}
}
}


