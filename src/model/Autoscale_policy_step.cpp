/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UnikraftCloudV1APIClient/model/Autoscale_policy_step.h"

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {



Autoscale_policy_step::Autoscale_policy_step()
{
    m_Lower_bound = 0;
    m_Lower_boundIsSet = false;
    m_Upper_bound = 0;
    m_Upper_boundIsSet = false;
    m_Adjustment = 0;
    m_AdjustmentIsSet = false;
}

Autoscale_policy_step::~Autoscale_policy_step()
{
}

void Autoscale_policy_step::validate()
{
    // TODO: implement validation
}

web::json::value Autoscale_policy_step::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Lower_boundIsSet)
    {
        val[utility::conversions::to_string_t(U("lower_bound"))] = ModelBase::toJson(m_Lower_bound);
    }
    if(m_Upper_boundIsSet)
    {
        val[utility::conversions::to_string_t(U("upper_bound"))] = ModelBase::toJson(m_Upper_bound);
    }
    if(m_AdjustmentIsSet)
    {
        val[utility::conversions::to_string_t(U("adjustment"))] = ModelBase::toJson(m_Adjustment);
    }

    return val;
}

bool Autoscale_policy_step::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("lower_bound"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lower_bound")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLowerBound;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLowerBound);
            setLowerBound(refVal_setLowerBound);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("upper_bound"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("upper_bound")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUpperBound;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpperBound);
            setUpperBound(refVal_setUpperBound);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("adjustment"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("adjustment")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAdjustment;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdjustment);
            setAdjustment(refVal_setAdjustment);
        }
    }
    return ok;
}

void Autoscale_policy_step::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Lower_boundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lower_bound")), m_Lower_bound));
    }
    if(m_Upper_boundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("upper_bound")), m_Upper_bound));
    }
    if(m_AdjustmentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adjustment")), m_Adjustment));
    }
}

bool Autoscale_policy_step::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("lower_bound"))))
    {
        int32_t refVal_setLowerBound;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lower_bound"))), refVal_setLowerBound );
        setLowerBound(refVal_setLowerBound);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("upper_bound"))))
    {
        int32_t refVal_setUpperBound;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("upper_bound"))), refVal_setUpperBound );
        setUpperBound(refVal_setUpperBound);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adjustment"))))
    {
        int32_t refVal_setAdjustment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adjustment"))), refVal_setAdjustment );
        setAdjustment(refVal_setAdjustment);
    }
    return ok;
}

int32_t Autoscale_policy_step::getLowerBound() const
{
    return m_Lower_bound;
}

void Autoscale_policy_step::setLowerBound(int32_t value)
{
    m_Lower_bound = value;
    m_Lower_boundIsSet = true;
}

bool Autoscale_policy_step::lowerBoundIsSet() const
{
    return m_Lower_boundIsSet;
}

void Autoscale_policy_step::unsetLower_bound()
{
    m_Lower_boundIsSet = false;
}
int32_t Autoscale_policy_step::getUpperBound() const
{
    return m_Upper_bound;
}

void Autoscale_policy_step::setUpperBound(int32_t value)
{
    m_Upper_bound = value;
    m_Upper_boundIsSet = true;
}

bool Autoscale_policy_step::upperBoundIsSet() const
{
    return m_Upper_boundIsSet;
}

void Autoscale_policy_step::unsetUpper_bound()
{
    m_Upper_boundIsSet = false;
}
int32_t Autoscale_policy_step::getAdjustment() const
{
    return m_Adjustment;
}

void Autoscale_policy_step::setAdjustment(int32_t value)
{
    m_Adjustment = value;
    m_AdjustmentIsSet = true;
}

bool Autoscale_policy_step::adjustmentIsSet() const
{
    return m_AdjustmentIsSet;
}

void Autoscale_policy_step::unsetAdjustment()
{
    m_AdjustmentIsSet = false;
}
}
}
}
}


