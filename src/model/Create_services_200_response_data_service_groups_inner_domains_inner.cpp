/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UnikraftCloudV1APIClient/model/Create_services_200_response_data_service_groups_inner_domains_inner.h"

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {



Create_services_200_response_data_service_groups_inner_domains_inner::Create_services_200_response_data_service_groups_inner_domains_inner()
{
    m_Fqdn = utility::conversions::to_string_t("");
    m_FqdnIsSet = false;
    m_CertificateIsSet = false;
}

Create_services_200_response_data_service_groups_inner_domains_inner::~Create_services_200_response_data_service_groups_inner_domains_inner()
{
}

void Create_services_200_response_data_service_groups_inner_domains_inner::validate()
{
    // TODO: implement validation
}

web::json::value Create_services_200_response_data_service_groups_inner_domains_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FqdnIsSet)
    {
        val[utility::conversions::to_string_t(U("fqdn"))] = ModelBase::toJson(m_Fqdn);
    }
    if(m_CertificateIsSet)
    {
        val[utility::conversions::to_string_t(U("certificate"))] = ModelBase::toJson(m_Certificate);
    }

    return val;
}

bool Create_services_200_response_data_service_groups_inner_domains_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("fqdn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fqdn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFqdn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFqdn);
            setFqdn(refVal_setFqdn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("certificate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("certificate")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Create_services_200_response_data_service_groups_inner_domains_inner_certificate> refVal_setCertificate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCertificate);
            setCertificate(refVal_setCertificate);
        }
    }
    return ok;
}

void Create_services_200_response_data_service_groups_inner_domains_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_FqdnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fqdn")), m_Fqdn));
    }
    if(m_CertificateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("certificate")), m_Certificate));
    }
}

bool Create_services_200_response_data_service_groups_inner_domains_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("fqdn"))))
    {
        utility::string_t refVal_setFqdn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fqdn"))), refVal_setFqdn );
        setFqdn(refVal_setFqdn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("certificate"))))
    {
        std::shared_ptr<Create_services_200_response_data_service_groups_inner_domains_inner_certificate> refVal_setCertificate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("certificate"))), refVal_setCertificate );
        setCertificate(refVal_setCertificate);
    }
    return ok;
}

utility::string_t Create_services_200_response_data_service_groups_inner_domains_inner::getFqdn() const
{
    return m_Fqdn;
}

void Create_services_200_response_data_service_groups_inner_domains_inner::setFqdn(const utility::string_t& value)
{
    m_Fqdn = value;
    m_FqdnIsSet = true;
}

bool Create_services_200_response_data_service_groups_inner_domains_inner::fqdnIsSet() const
{
    return m_FqdnIsSet;
}

void Create_services_200_response_data_service_groups_inner_domains_inner::unsetFqdn()
{
    m_FqdnIsSet = false;
}
std::shared_ptr<Create_services_200_response_data_service_groups_inner_domains_inner_certificate> Create_services_200_response_data_service_groups_inner_domains_inner::getCertificate() const
{
    return m_Certificate;
}

void Create_services_200_response_data_service_groups_inner_domains_inner::setCertificate(const std::shared_ptr<Create_services_200_response_data_service_groups_inner_domains_inner_certificate>& value)
{
    m_Certificate = value;
    m_CertificateIsSet = true;
}

bool Create_services_200_response_data_service_groups_inner_domains_inner::certificateIsSet() const
{
    return m_CertificateIsSet;
}

void Create_services_200_response_data_service_groups_inner_domains_inner::unsetCertificate()
{
    m_CertificateIsSet = false;
}
}
}
}
}


