/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UnikraftCloudV1APIClient/model/User_quota_limits.h"

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {



User_quota_limits::User_quota_limits()
{
    m_Min_memory_mb = 0;
    m_Min_memory_mbIsSet = false;
    m_Max_memory_mb = 0;
    m_Max_memory_mbIsSet = false;
    m_Min_volume_mb = 0;
    m_Min_volume_mbIsSet = false;
    m_Max_volume_mb = 0;
    m_Max_volume_mbIsSet = false;
    m_Min_autoscale_size = 0;
    m_Min_autoscale_sizeIsSet = false;
    m_Max_autoscale_size = 0;
    m_Max_autoscale_sizeIsSet = false;
}

User_quota_limits::~User_quota_limits()
{
}

void User_quota_limits::validate()
{
    // TODO: implement validation
}

web::json::value User_quota_limits::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Min_memory_mbIsSet)
    {
        val[utility::conversions::to_string_t(U("min_memory_mb"))] = ModelBase::toJson(m_Min_memory_mb);
    }
    if(m_Max_memory_mbIsSet)
    {
        val[utility::conversions::to_string_t(U("max_memory_mb"))] = ModelBase::toJson(m_Max_memory_mb);
    }
    if(m_Min_volume_mbIsSet)
    {
        val[utility::conversions::to_string_t(U("min_volume_mb"))] = ModelBase::toJson(m_Min_volume_mb);
    }
    if(m_Max_volume_mbIsSet)
    {
        val[utility::conversions::to_string_t(U("max_volume_mb"))] = ModelBase::toJson(m_Max_volume_mb);
    }
    if(m_Min_autoscale_sizeIsSet)
    {
        val[utility::conversions::to_string_t(U("min_autoscale_size"))] = ModelBase::toJson(m_Min_autoscale_size);
    }
    if(m_Max_autoscale_sizeIsSet)
    {
        val[utility::conversions::to_string_t(U("max_autoscale_size"))] = ModelBase::toJson(m_Max_autoscale_size);
    }

    return val;
}

bool User_quota_limits::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("min_memory_mb"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("min_memory_mb")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMinMemoryMb;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinMemoryMb);
            setMinMemoryMb(refVal_setMinMemoryMb);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_memory_mb"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_memory_mb")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxMemoryMb;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxMemoryMb);
            setMaxMemoryMb(refVal_setMaxMemoryMb);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("min_volume_mb"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("min_volume_mb")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMinVolumeMb;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinVolumeMb);
            setMinVolumeMb(refVal_setMinVolumeMb);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_volume_mb"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_volume_mb")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxVolumeMb;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxVolumeMb);
            setMaxVolumeMb(refVal_setMaxVolumeMb);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("min_autoscale_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("min_autoscale_size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMinAutoscaleSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinAutoscaleSize);
            setMinAutoscaleSize(refVal_setMinAutoscaleSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_autoscale_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_autoscale_size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxAutoscaleSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxAutoscaleSize);
            setMaxAutoscaleSize(refVal_setMaxAutoscaleSize);
        }
    }
    return ok;
}

void User_quota_limits::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Min_memory_mbIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("min_memory_mb")), m_Min_memory_mb));
    }
    if(m_Max_memory_mbIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_memory_mb")), m_Max_memory_mb));
    }
    if(m_Min_volume_mbIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("min_volume_mb")), m_Min_volume_mb));
    }
    if(m_Max_volume_mbIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_volume_mb")), m_Max_volume_mb));
    }
    if(m_Min_autoscale_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("min_autoscale_size")), m_Min_autoscale_size));
    }
    if(m_Max_autoscale_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_autoscale_size")), m_Max_autoscale_size));
    }
}

bool User_quota_limits::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("min_memory_mb"))))
    {
        int32_t refVal_setMinMemoryMb;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("min_memory_mb"))), refVal_setMinMemoryMb );
        setMinMemoryMb(refVal_setMinMemoryMb);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_memory_mb"))))
    {
        int32_t refVal_setMaxMemoryMb;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_memory_mb"))), refVal_setMaxMemoryMb );
        setMaxMemoryMb(refVal_setMaxMemoryMb);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("min_volume_mb"))))
    {
        int32_t refVal_setMinVolumeMb;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("min_volume_mb"))), refVal_setMinVolumeMb );
        setMinVolumeMb(refVal_setMinVolumeMb);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_volume_mb"))))
    {
        int32_t refVal_setMaxVolumeMb;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_volume_mb"))), refVal_setMaxVolumeMb );
        setMaxVolumeMb(refVal_setMaxVolumeMb);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("min_autoscale_size"))))
    {
        int32_t refVal_setMinAutoscaleSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("min_autoscale_size"))), refVal_setMinAutoscaleSize );
        setMinAutoscaleSize(refVal_setMinAutoscaleSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_autoscale_size"))))
    {
        int32_t refVal_setMaxAutoscaleSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_autoscale_size"))), refVal_setMaxAutoscaleSize );
        setMaxAutoscaleSize(refVal_setMaxAutoscaleSize);
    }
    return ok;
}

int32_t User_quota_limits::getMinMemoryMb() const
{
    return m_Min_memory_mb;
}

void User_quota_limits::setMinMemoryMb(int32_t value)
{
    m_Min_memory_mb = value;
    m_Min_memory_mbIsSet = true;
}

bool User_quota_limits::minMemoryMbIsSet() const
{
    return m_Min_memory_mbIsSet;
}

void User_quota_limits::unsetMin_memory_mb()
{
    m_Min_memory_mbIsSet = false;
}
int32_t User_quota_limits::getMaxMemoryMb() const
{
    return m_Max_memory_mb;
}

void User_quota_limits::setMaxMemoryMb(int32_t value)
{
    m_Max_memory_mb = value;
    m_Max_memory_mbIsSet = true;
}

bool User_quota_limits::maxMemoryMbIsSet() const
{
    return m_Max_memory_mbIsSet;
}

void User_quota_limits::unsetMax_memory_mb()
{
    m_Max_memory_mbIsSet = false;
}
int32_t User_quota_limits::getMinVolumeMb() const
{
    return m_Min_volume_mb;
}

void User_quota_limits::setMinVolumeMb(int32_t value)
{
    m_Min_volume_mb = value;
    m_Min_volume_mbIsSet = true;
}

bool User_quota_limits::minVolumeMbIsSet() const
{
    return m_Min_volume_mbIsSet;
}

void User_quota_limits::unsetMin_volume_mb()
{
    m_Min_volume_mbIsSet = false;
}
int32_t User_quota_limits::getMaxVolumeMb() const
{
    return m_Max_volume_mb;
}

void User_quota_limits::setMaxVolumeMb(int32_t value)
{
    m_Max_volume_mb = value;
    m_Max_volume_mbIsSet = true;
}

bool User_quota_limits::maxVolumeMbIsSet() const
{
    return m_Max_volume_mbIsSet;
}

void User_quota_limits::unsetMax_volume_mb()
{
    m_Max_volume_mbIsSet = false;
}
int32_t User_quota_limits::getMinAutoscaleSize() const
{
    return m_Min_autoscale_size;
}

void User_quota_limits::setMinAutoscaleSize(int32_t value)
{
    m_Min_autoscale_size = value;
    m_Min_autoscale_sizeIsSet = true;
}

bool User_quota_limits::minAutoscaleSizeIsSet() const
{
    return m_Min_autoscale_sizeIsSet;
}

void User_quota_limits::unsetMin_autoscale_size()
{
    m_Min_autoscale_sizeIsSet = false;
}
int32_t User_quota_limits::getMaxAutoscaleSize() const
{
    return m_Max_autoscale_size;
}

void User_quota_limits::setMaxAutoscaleSize(int32_t value)
{
    m_Max_autoscale_size = value;
    m_Max_autoscale_sizeIsSet = true;
}

bool User_quota_limits::maxAutoscaleSizeIsSet() const
{
    return m_Max_autoscale_sizeIsSet;
}

void User_quota_limits::unsetMax_autoscale_size()
{
    m_Max_autoscale_sizeIsSet = false;
}
}
}
}
}


