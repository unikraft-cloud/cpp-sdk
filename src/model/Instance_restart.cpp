/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UnikraftCloudV1APIClient/model/Instance_restart.h"

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {



Instance_restart::Instance_restart()
{
    m_Attempt = 0;
    m_AttemptIsSet = false;
    m_Next_at = utility::datetime();
    m_Next_atIsSet = false;
}

Instance_restart::~Instance_restart()
{
}

void Instance_restart::validate()
{
    // TODO: implement validation
}

web::json::value Instance_restart::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AttemptIsSet)
    {
        val[utility::conversions::to_string_t(U("attempt"))] = ModelBase::toJson(m_Attempt);
    }
    if(m_Next_atIsSet)
    {
        val[utility::conversions::to_string_t(U("next_at"))] = ModelBase::toJson(m_Next_at);
    }

    return val;
}

bool Instance_restart::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("attempt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("attempt")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAttempt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAttempt);
            setAttempt(refVal_setAttempt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("next_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("next_at")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setNextAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNextAt);
            setNextAt(refVal_setNextAt);
        }
    }
    return ok;
}

void Instance_restart::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AttemptIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("attempt")), m_Attempt));
    }
    if(m_Next_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("next_at")), m_Next_at));
    }
}

bool Instance_restart::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("attempt"))))
    {
        int32_t refVal_setAttempt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("attempt"))), refVal_setAttempt );
        setAttempt(refVal_setAttempt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("next_at"))))
    {
        utility::datetime refVal_setNextAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("next_at"))), refVal_setNextAt );
        setNextAt(refVal_setNextAt);
    }
    return ok;
}

int32_t Instance_restart::getAttempt() const
{
    return m_Attempt;
}

void Instance_restart::setAttempt(int32_t value)
{
    m_Attempt = value;
    m_AttemptIsSet = true;
}

bool Instance_restart::attemptIsSet() const
{
    return m_AttemptIsSet;
}

void Instance_restart::unsetAttempt()
{
    m_AttemptIsSet = false;
}
utility::datetime Instance_restart::getNextAt() const
{
    return m_Next_at;
}

void Instance_restart::setNextAt(const utility::datetime& value)
{
    m_Next_at = value;
    m_Next_atIsSet = true;
}

bool Instance_restart::nextAtIsSet() const
{
    return m_Next_atIsSet;
}

void Instance_restart::unsetNext_at()
{
    m_Next_atIsSet = false;
}
}
}
}
}


