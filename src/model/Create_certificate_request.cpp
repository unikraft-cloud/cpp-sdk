/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UnikraftCloudV1APIClient/model/Create_certificate_request.h"

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {



Create_certificate_request::Create_certificate_request()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Cn = utility::conversions::to_string_t("");
    m_CnIsSet = false;
    m_Chain = utility::conversions::to_string_t("");
    m_ChainIsSet = false;
    m_Pkey = utility::conversions::to_string_t("");
    m_PkeyIsSet = false;
}

Create_certificate_request::~Create_certificate_request()
{
}

void Create_certificate_request::validate()
{
    // TODO: implement validation
}

web::json::value Create_certificate_request::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_CnIsSet)
    {
        val[utility::conversions::to_string_t(U("cn"))] = ModelBase::toJson(m_Cn);
    }
    if(m_ChainIsSet)
    {
        val[utility::conversions::to_string_t(U("chain"))] = ModelBase::toJson(m_Chain);
    }
    if(m_PkeyIsSet)
    {
        val[utility::conversions::to_string_t(U("pkey"))] = ModelBase::toJson(m_Pkey);
    }

    return val;
}

bool Create_certificate_request::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCn);
            setCn(refVal_setCn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("chain"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("chain")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setChain;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChain);
            setChain(refVal_setChain);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pkey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pkey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPkey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPkey);
            setPkey(refVal_setPkey);
        }
    }
    return ok;
}

void Create_certificate_request::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_CnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cn")), m_Cn));
    }
    if(m_ChainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("chain")), m_Chain));
    }
    if(m_PkeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pkey")), m_Pkey));
    }
}

bool Create_certificate_request::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cn"))))
    {
        utility::string_t refVal_setCn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cn"))), refVal_setCn );
        setCn(refVal_setCn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("chain"))))
    {
        utility::string_t refVal_setChain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("chain"))), refVal_setChain );
        setChain(refVal_setChain);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pkey"))))
    {
        utility::string_t refVal_setPkey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pkey"))), refVal_setPkey );
        setPkey(refVal_setPkey);
    }
    return ok;
}

utility::string_t Create_certificate_request::getName() const
{
    return m_Name;
}

void Create_certificate_request::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Create_certificate_request::nameIsSet() const
{
    return m_NameIsSet;
}

void Create_certificate_request::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t Create_certificate_request::getCn() const
{
    return m_Cn;
}

void Create_certificate_request::setCn(const utility::string_t& value)
{
    m_Cn = value;
    m_CnIsSet = true;
}

bool Create_certificate_request::cnIsSet() const
{
    return m_CnIsSet;
}

void Create_certificate_request::unsetCn()
{
    m_CnIsSet = false;
}
utility::string_t Create_certificate_request::getChain() const
{
    return m_Chain;
}

void Create_certificate_request::setChain(const utility::string_t& value)
{
    m_Chain = value;
    m_ChainIsSet = true;
}

bool Create_certificate_request::chainIsSet() const
{
    return m_ChainIsSet;
}

void Create_certificate_request::unsetChain()
{
    m_ChainIsSet = false;
}
utility::string_t Create_certificate_request::getPkey() const
{
    return m_Pkey;
}

void Create_certificate_request::setPkey(const utility::string_t& value)
{
    m_Pkey = value;
    m_PkeyIsSet = true;
}

bool Create_certificate_request::pkeyIsSet() const
{
    return m_PkeyIsSet;
}

void Create_certificate_request::unsetPkey()
{
    m_PkeyIsSet = false;
}
}
}
}
}


