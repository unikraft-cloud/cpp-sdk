/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UnikraftCloudV1APIClient/model/Instance.h"

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {



Instance::Instance()
{
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_Uuid = utility::conversions::to_string_t("");
    m_UuidIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Created_at = utility::datetime();
    m_Created_atIsSet = false;
    m_State = utility::conversions::to_string_t("");
    m_StateIsSet = false;
    m_Image = utility::conversions::to_string_t("");
    m_ImageIsSet = false;
    m_Memory_mb = 0;
    m_Memory_mbIsSet = false;
    m_ArgsIsSet = false;
    m_EnvIsSet = false;
    m_Start_count = 0;
    m_Start_countIsSet = false;
    m_Started_at = utility::datetime();
    m_Started_atIsSet = false;
    m_Stopped_at = utility::datetime();
    m_Stopped_atIsSet = false;
    m_Uptime_ms = 0L;
    m_Uptime_msIsSet = false;
    m_Rss_bytes = 0L;
    m_Rss_bytesIsSet = false;
    m_Cpu_time_ms = 0L;
    m_Cpu_time_msIsSet = false;
    m_Nconns = 0;
    m_NconnsIsSet = false;
    m_Nreqs = 0;
    m_NreqsIsSet = false;
    m_Nqueued = 0;
    m_NqueuedIsSet = false;
    m_Ntotal = 0L;
    m_NtotalIsSet = false;
    m_Vmm_start_time_us = 0;
    m_Vmm_start_time_usIsSet = false;
    m_Vmm_load_time_us = 0;
    m_Vmm_load_time_usIsSet = false;
    m_Vmm_ready_time_us = 0;
    m_Vmm_ready_time_usIsSet = false;
    m_Boot_time_us = 0;
    m_Boot_time_usIsSet = false;
    m_Net_time_us = 0;
    m_Net_time_usIsSet = false;
    m_Stop_reason = 0;
    m_Stop_reasonIsSet = false;
    m_Exit_code = 0;
    m_Exit_codeIsSet = false;
    m_Stop_code = 0;
    m_Stop_codeIsSet = false;
    m_Restart_policy = utility::conversions::to_string_t("");
    m_Restart_policyIsSet = false;
    m_RestartIsSet = false;
    m_Restart_count = 0;
    m_Restart_countIsSet = false;
    m_Scale_to_zeroIsSet = false;
    m_SnapshotIsSet = false;
    m_Private_fqdn = utility::conversions::to_string_t("");
    m_Private_fqdnIsSet = false;
    m_Private_ip = utility::conversions::to_string_t("");
    m_Private_ipIsSet = false;
    m_Service_groupIsSet = false;
    m_VolumesIsSet = false;
    m_Network_interfacesIsSet = false;
}

Instance::~Instance()
{
}

void Instance::validate()
{
    // TODO: implement validation
}

web::json::value Instance::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_UuidIsSet)
    {
        val[utility::conversions::to_string_t(U("uuid"))] = ModelBase::toJson(m_Uuid);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at"))] = ModelBase::toJson(m_Created_at);
    }
    if(m_StateIsSet)
    {
        val[utility::conversions::to_string_t(U("state"))] = ModelBase::toJson(m_State);
    }
    if(m_ImageIsSet)
    {
        val[utility::conversions::to_string_t(U("image"))] = ModelBase::toJson(m_Image);
    }
    if(m_Memory_mbIsSet)
    {
        val[utility::conversions::to_string_t(U("memory_mb"))] = ModelBase::toJson(m_Memory_mb);
    }
    if(m_ArgsIsSet)
    {
        val[utility::conversions::to_string_t(U("args"))] = ModelBase::toJson(m_Args);
    }
    if(m_EnvIsSet)
    {
        val[utility::conversions::to_string_t(U("env"))] = ModelBase::toJson(m_Env);
    }
    if(m_Start_countIsSet)
    {
        val[utility::conversions::to_string_t(U("start_count"))] = ModelBase::toJson(m_Start_count);
    }
    if(m_Started_atIsSet)
    {
        val[utility::conversions::to_string_t(U("started_at"))] = ModelBase::toJson(m_Started_at);
    }
    if(m_Stopped_atIsSet)
    {
        val[utility::conversions::to_string_t(U("stopped_at"))] = ModelBase::toJson(m_Stopped_at);
    }
    if(m_Uptime_msIsSet)
    {
        val[utility::conversions::to_string_t(U("uptime_ms"))] = ModelBase::toJson(m_Uptime_ms);
    }
    if(m_Rss_bytesIsSet)
    {
        val[utility::conversions::to_string_t(U("rss_bytes"))] = ModelBase::toJson(m_Rss_bytes);
    }
    if(m_Cpu_time_msIsSet)
    {
        val[utility::conversions::to_string_t(U("cpu_time_ms"))] = ModelBase::toJson(m_Cpu_time_ms);
    }
    if(m_NconnsIsSet)
    {
        val[utility::conversions::to_string_t(U("nconns"))] = ModelBase::toJson(m_Nconns);
    }
    if(m_NreqsIsSet)
    {
        val[utility::conversions::to_string_t(U("nreqs"))] = ModelBase::toJson(m_Nreqs);
    }
    if(m_NqueuedIsSet)
    {
        val[utility::conversions::to_string_t(U("nqueued"))] = ModelBase::toJson(m_Nqueued);
    }
    if(m_NtotalIsSet)
    {
        val[utility::conversions::to_string_t(U("ntotal"))] = ModelBase::toJson(m_Ntotal);
    }
    if(m_Vmm_start_time_usIsSet)
    {
        val[utility::conversions::to_string_t(U("vmm_start_time_us"))] = ModelBase::toJson(m_Vmm_start_time_us);
    }
    if(m_Vmm_load_time_usIsSet)
    {
        val[utility::conversions::to_string_t(U("vmm_load_time_us"))] = ModelBase::toJson(m_Vmm_load_time_us);
    }
    if(m_Vmm_ready_time_usIsSet)
    {
        val[utility::conversions::to_string_t(U("vmm_ready_time_us"))] = ModelBase::toJson(m_Vmm_ready_time_us);
    }
    if(m_Boot_time_usIsSet)
    {
        val[utility::conversions::to_string_t(U("boot_time_us"))] = ModelBase::toJson(m_Boot_time_us);
    }
    if(m_Net_time_usIsSet)
    {
        val[utility::conversions::to_string_t(U("net_time_us"))] = ModelBase::toJson(m_Net_time_us);
    }
    if(m_Stop_reasonIsSet)
    {
        val[utility::conversions::to_string_t(U("stop_reason"))] = ModelBase::toJson(m_Stop_reason);
    }
    if(m_Exit_codeIsSet)
    {
        val[utility::conversions::to_string_t(U("exit_code"))] = ModelBase::toJson(m_Exit_code);
    }
    if(m_Stop_codeIsSet)
    {
        val[utility::conversions::to_string_t(U("stop_code"))] = ModelBase::toJson(m_Stop_code);
    }
    if(m_Restart_policyIsSet)
    {
        val[utility::conversions::to_string_t(U("restart_policy"))] = ModelBase::toJson(m_Restart_policy);
    }
    if(m_RestartIsSet)
    {
        val[utility::conversions::to_string_t(U("restart"))] = ModelBase::toJson(m_Restart);
    }
    if(m_Restart_countIsSet)
    {
        val[utility::conversions::to_string_t(U("restart_count"))] = ModelBase::toJson(m_Restart_count);
    }
    if(m_Scale_to_zeroIsSet)
    {
        val[utility::conversions::to_string_t(U("scale_to_zero"))] = ModelBase::toJson(m_Scale_to_zero);
    }
    if(m_SnapshotIsSet)
    {
        val[utility::conversions::to_string_t(U("snapshot"))] = ModelBase::toJson(m_Snapshot);
    }
    if(m_Private_fqdnIsSet)
    {
        val[utility::conversions::to_string_t(U("private_fqdn"))] = ModelBase::toJson(m_Private_fqdn);
    }
    if(m_Private_ipIsSet)
    {
        val[utility::conversions::to_string_t(U("private_ip"))] = ModelBase::toJson(m_Private_ip);
    }
    if(m_Service_groupIsSet)
    {
        val[utility::conversions::to_string_t(U("service_group"))] = ModelBase::toJson(m_Service_group);
    }
    if(m_VolumesIsSet)
    {
        val[utility::conversions::to_string_t(U("volumes"))] = ModelBase::toJson(m_Volumes);
    }
    if(m_Network_interfacesIsSet)
    {
        val[utility::conversions::to_string_t(U("network_interfaces"))] = ModelBase::toJson(m_Network_interfaces);
    }

    return val;
}

bool Instance::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uuid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uuid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUuid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUuid);
            setUuid(refVal_setUuid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("state"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("state")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setState;
            ok &= ModelBase::fromJson(fieldValue, refVal_setState);
            setState(refVal_setState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("image"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("image")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImage);
            setImage(refVal_setImage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("memory_mb"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("memory_mb")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMemoryMb;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemoryMb);
            setMemoryMb(refVal_setMemoryMb);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("args"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("args")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setArgs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setArgs);
            setArgs(refVal_setArgs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("env"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("env")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Create_instance_request_env> refVal_setEnv;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnv);
            setEnv(refVal_setEnv);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("start_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("start_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setStartCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStartCount);
            setStartCount(refVal_setStartCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("started_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("started_at")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setStartedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStartedAt);
            setStartedAt(refVal_setStartedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stopped_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stopped_at")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setStoppedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStoppedAt);
            setStoppedAt(refVal_setStoppedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uptime_ms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uptime_ms")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setUptimeMs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUptimeMs);
            setUptimeMs(refVal_setUptimeMs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rss_bytes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rss_bytes")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setRssBytes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRssBytes);
            setRssBytes(refVal_setRssBytes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpu_time_ms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpu_time_ms")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setCpuTimeMs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpuTimeMs);
            setCpuTimeMs(refVal_setCpuTimeMs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nconns"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nconns")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNconns;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNconns);
            setNconns(refVal_setNconns);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nreqs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nreqs")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNreqs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNreqs);
            setNreqs(refVal_setNreqs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nqueued"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nqueued")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNqueued;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNqueued);
            setNqueued(refVal_setNqueued);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ntotal"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ntotal")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setNtotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNtotal);
            setNtotal(refVal_setNtotal);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vmm_start_time_us"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vmm_start_time_us")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setVmmStartTimeUs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVmmStartTimeUs);
            setVmmStartTimeUs(refVal_setVmmStartTimeUs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vmm_load_time_us"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vmm_load_time_us")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setVmmLoadTimeUs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVmmLoadTimeUs);
            setVmmLoadTimeUs(refVal_setVmmLoadTimeUs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vmm_ready_time_us"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vmm_ready_time_us")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setVmmReadyTimeUs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVmmReadyTimeUs);
            setVmmReadyTimeUs(refVal_setVmmReadyTimeUs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("boot_time_us"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("boot_time_us")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBootTimeUs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBootTimeUs);
            setBootTimeUs(refVal_setBootTimeUs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("net_time_us"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("net_time_us")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNetTimeUs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNetTimeUs);
            setNetTimeUs(refVal_setNetTimeUs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stop_reason"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stop_reason")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setStopReason;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStopReason);
            setStopReason(refVal_setStopReason);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exit_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exit_code")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setExitCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExitCode);
            setExitCode(refVal_setExitCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stop_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stop_code")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setStopCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStopCode);
            setStopCode(refVal_setStopCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("restart_policy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("restart_policy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRestartPolicy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRestartPolicy);
            setRestartPolicy(refVal_setRestartPolicy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("restart"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("restart")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Instance_restart> refVal_setRestart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRestart);
            setRestart(refVal_setRestart);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("restart_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("restart_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRestartCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRestartCount);
            setRestartCount(refVal_setRestartCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("scale_to_zero"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("scale_to_zero")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Create_instance_request_scale_to_zero> refVal_setScaleToZero;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScaleToZero);
            setScaleToZero(refVal_setScaleToZero);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("snapshot"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("snapshot")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Instance_snapshot> refVal_setSnapshot;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSnapshot);
            setSnapshot(refVal_setSnapshot);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("private_fqdn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("private_fqdn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPrivateFqdn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrivateFqdn);
            setPrivateFqdn(refVal_setPrivateFqdn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("private_ip"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("private_ip")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPrivateIp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrivateIp);
            setPrivateIp(refVal_setPrivateIp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("service_group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("service_group")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Instance_service_group> refVal_setServiceGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setServiceGroup);
            setServiceGroup(refVal_setServiceGroup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("volumes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("volumes")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Create_instance_request_volumes_inner>> refVal_setVolumes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolumes);
            setVolumes(refVal_setVolumes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("network_interfaces"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("network_interfaces")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Instance_network_interfaces_inner>> refVal_setNetworkInterfaces;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNetworkInterfaces);
            setNetworkInterfaces(refVal_setNetworkInterfaces);
        }
    }
    return ok;
}

void Instance::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_UuidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uuid")), m_Uuid));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at")), m_Created_at));
    }
    if(m_StateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("state")), m_State));
    }
    if(m_ImageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("image")), m_Image));
    }
    if(m_Memory_mbIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("memory_mb")), m_Memory_mb));
    }
    if(m_ArgsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("args")), m_Args));
    }
    if(m_EnvIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("env")), m_Env));
    }
    if(m_Start_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("start_count")), m_Start_count));
    }
    if(m_Started_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("started_at")), m_Started_at));
    }
    if(m_Stopped_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stopped_at")), m_Stopped_at));
    }
    if(m_Uptime_msIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uptime_ms")), m_Uptime_ms));
    }
    if(m_Rss_bytesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rss_bytes")), m_Rss_bytes));
    }
    if(m_Cpu_time_msIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpu_time_ms")), m_Cpu_time_ms));
    }
    if(m_NconnsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nconns")), m_Nconns));
    }
    if(m_NreqsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nreqs")), m_Nreqs));
    }
    if(m_NqueuedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nqueued")), m_Nqueued));
    }
    if(m_NtotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ntotal")), m_Ntotal));
    }
    if(m_Vmm_start_time_usIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vmm_start_time_us")), m_Vmm_start_time_us));
    }
    if(m_Vmm_load_time_usIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vmm_load_time_us")), m_Vmm_load_time_us));
    }
    if(m_Vmm_ready_time_usIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vmm_ready_time_us")), m_Vmm_ready_time_us));
    }
    if(m_Boot_time_usIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("boot_time_us")), m_Boot_time_us));
    }
    if(m_Net_time_usIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("net_time_us")), m_Net_time_us));
    }
    if(m_Stop_reasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stop_reason")), m_Stop_reason));
    }
    if(m_Exit_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exit_code")), m_Exit_code));
    }
    if(m_Stop_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stop_code")), m_Stop_code));
    }
    if(m_Restart_policyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("restart_policy")), m_Restart_policy));
    }
    if(m_RestartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("restart")), m_Restart));
    }
    if(m_Restart_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("restart_count")), m_Restart_count));
    }
    if(m_Scale_to_zeroIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("scale_to_zero")), m_Scale_to_zero));
    }
    if(m_SnapshotIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("snapshot")), m_Snapshot));
    }
    if(m_Private_fqdnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("private_fqdn")), m_Private_fqdn));
    }
    if(m_Private_ipIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("private_ip")), m_Private_ip));
    }
    if(m_Service_groupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("service_group")), m_Service_group));
    }
    if(m_VolumesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("volumes")), m_Volumes));
    }
    if(m_Network_interfacesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("network_interfaces")), m_Network_interfaces));
    }
}

bool Instance::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uuid"))))
    {
        utility::string_t refVal_setUuid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uuid"))), refVal_setUuid );
        setUuid(refVal_setUuid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("state"))))
    {
        utility::string_t refVal_setState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("state"))), refVal_setState );
        setState(refVal_setState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("image"))))
    {
        utility::string_t refVal_setImage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("image"))), refVal_setImage );
        setImage(refVal_setImage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("memory_mb"))))
    {
        int32_t refVal_setMemoryMb;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("memory_mb"))), refVal_setMemoryMb );
        setMemoryMb(refVal_setMemoryMb);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("args"))))
    {
        std::vector<utility::string_t> refVal_setArgs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("args"))), refVal_setArgs );
        setArgs(refVal_setArgs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("env"))))
    {
        std::shared_ptr<Create_instance_request_env> refVal_setEnv;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("env"))), refVal_setEnv );
        setEnv(refVal_setEnv);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("start_count"))))
    {
        int32_t refVal_setStartCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("start_count"))), refVal_setStartCount );
        setStartCount(refVal_setStartCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("started_at"))))
    {
        utility::datetime refVal_setStartedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("started_at"))), refVal_setStartedAt );
        setStartedAt(refVal_setStartedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stopped_at"))))
    {
        utility::datetime refVal_setStoppedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stopped_at"))), refVal_setStoppedAt );
        setStoppedAt(refVal_setStoppedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uptime_ms"))))
    {
        int64_t refVal_setUptimeMs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uptime_ms"))), refVal_setUptimeMs );
        setUptimeMs(refVal_setUptimeMs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rss_bytes"))))
    {
        int64_t refVal_setRssBytes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rss_bytes"))), refVal_setRssBytes );
        setRssBytes(refVal_setRssBytes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpu_time_ms"))))
    {
        int64_t refVal_setCpuTimeMs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpu_time_ms"))), refVal_setCpuTimeMs );
        setCpuTimeMs(refVal_setCpuTimeMs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nconns"))))
    {
        int32_t refVal_setNconns;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nconns"))), refVal_setNconns );
        setNconns(refVal_setNconns);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nreqs"))))
    {
        int32_t refVal_setNreqs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nreqs"))), refVal_setNreqs );
        setNreqs(refVal_setNreqs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nqueued"))))
    {
        int32_t refVal_setNqueued;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nqueued"))), refVal_setNqueued );
        setNqueued(refVal_setNqueued);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ntotal"))))
    {
        int64_t refVal_setNtotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ntotal"))), refVal_setNtotal );
        setNtotal(refVal_setNtotal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vmm_start_time_us"))))
    {
        int32_t refVal_setVmmStartTimeUs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vmm_start_time_us"))), refVal_setVmmStartTimeUs );
        setVmmStartTimeUs(refVal_setVmmStartTimeUs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vmm_load_time_us"))))
    {
        int32_t refVal_setVmmLoadTimeUs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vmm_load_time_us"))), refVal_setVmmLoadTimeUs );
        setVmmLoadTimeUs(refVal_setVmmLoadTimeUs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vmm_ready_time_us"))))
    {
        int32_t refVal_setVmmReadyTimeUs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vmm_ready_time_us"))), refVal_setVmmReadyTimeUs );
        setVmmReadyTimeUs(refVal_setVmmReadyTimeUs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("boot_time_us"))))
    {
        int32_t refVal_setBootTimeUs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("boot_time_us"))), refVal_setBootTimeUs );
        setBootTimeUs(refVal_setBootTimeUs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("net_time_us"))))
    {
        int32_t refVal_setNetTimeUs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("net_time_us"))), refVal_setNetTimeUs );
        setNetTimeUs(refVal_setNetTimeUs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stop_reason"))))
    {
        int32_t refVal_setStopReason;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stop_reason"))), refVal_setStopReason );
        setStopReason(refVal_setStopReason);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exit_code"))))
    {
        int32_t refVal_setExitCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exit_code"))), refVal_setExitCode );
        setExitCode(refVal_setExitCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stop_code"))))
    {
        int32_t refVal_setStopCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stop_code"))), refVal_setStopCode );
        setStopCode(refVal_setStopCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("restart_policy"))))
    {
        utility::string_t refVal_setRestartPolicy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("restart_policy"))), refVal_setRestartPolicy );
        setRestartPolicy(refVal_setRestartPolicy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("restart"))))
    {
        std::shared_ptr<Instance_restart> refVal_setRestart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("restart"))), refVal_setRestart );
        setRestart(refVal_setRestart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("restart_count"))))
    {
        int32_t refVal_setRestartCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("restart_count"))), refVal_setRestartCount );
        setRestartCount(refVal_setRestartCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("scale_to_zero"))))
    {
        std::shared_ptr<Create_instance_request_scale_to_zero> refVal_setScaleToZero;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("scale_to_zero"))), refVal_setScaleToZero );
        setScaleToZero(refVal_setScaleToZero);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("snapshot"))))
    {
        std::shared_ptr<Instance_snapshot> refVal_setSnapshot;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("snapshot"))), refVal_setSnapshot );
        setSnapshot(refVal_setSnapshot);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("private_fqdn"))))
    {
        utility::string_t refVal_setPrivateFqdn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("private_fqdn"))), refVal_setPrivateFqdn );
        setPrivateFqdn(refVal_setPrivateFqdn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("private_ip"))))
    {
        utility::string_t refVal_setPrivateIp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("private_ip"))), refVal_setPrivateIp );
        setPrivateIp(refVal_setPrivateIp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("service_group"))))
    {
        std::shared_ptr<Instance_service_group> refVal_setServiceGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("service_group"))), refVal_setServiceGroup );
        setServiceGroup(refVal_setServiceGroup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("volumes"))))
    {
        std::vector<std::shared_ptr<Create_instance_request_volumes_inner>> refVal_setVolumes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("volumes"))), refVal_setVolumes );
        setVolumes(refVal_setVolumes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("network_interfaces"))))
    {
        std::vector<std::shared_ptr<Instance_network_interfaces_inner>> refVal_setNetworkInterfaces;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("network_interfaces"))), refVal_setNetworkInterfaces );
        setNetworkInterfaces(refVal_setNetworkInterfaces);
    }
    return ok;
}

utility::string_t Instance::getStatus() const
{
    return m_Status;
}

void Instance::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool Instance::statusIsSet() const
{
    return m_StatusIsSet;
}

void Instance::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t Instance::getUuid() const
{
    return m_Uuid;
}

void Instance::setUuid(const utility::string_t& value)
{
    m_Uuid = value;
    m_UuidIsSet = true;
}

bool Instance::uuidIsSet() const
{
    return m_UuidIsSet;
}

void Instance::unsetUuid()
{
    m_UuidIsSet = false;
}
utility::string_t Instance::getName() const
{
    return m_Name;
}

void Instance::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Instance::nameIsSet() const
{
    return m_NameIsSet;
}

void Instance::unsetName()
{
    m_NameIsSet = false;
}
utility::datetime Instance::getCreatedAt() const
{
    return m_Created_at;
}

void Instance::setCreatedAt(const utility::datetime& value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool Instance::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void Instance::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
utility::string_t Instance::getState() const
{
    return m_State;
}

void Instance::setState(const utility::string_t& value)
{
    m_State = value;
    m_StateIsSet = true;
}

bool Instance::stateIsSet() const
{
    return m_StateIsSet;
}

void Instance::unsetState()
{
    m_StateIsSet = false;
}
utility::string_t Instance::getImage() const
{
    return m_Image;
}

void Instance::setImage(const utility::string_t& value)
{
    m_Image = value;
    m_ImageIsSet = true;
}

bool Instance::imageIsSet() const
{
    return m_ImageIsSet;
}

void Instance::unsetImage()
{
    m_ImageIsSet = false;
}
int32_t Instance::getMemoryMb() const
{
    return m_Memory_mb;
}

void Instance::setMemoryMb(int32_t value)
{
    m_Memory_mb = value;
    m_Memory_mbIsSet = true;
}

bool Instance::memoryMbIsSet() const
{
    return m_Memory_mbIsSet;
}

void Instance::unsetMemory_mb()
{
    m_Memory_mbIsSet = false;
}
std::vector<utility::string_t>& Instance::getArgs()
{
    return m_Args;
}

void Instance::setArgs(const std::vector<utility::string_t>& value)
{
    m_Args = value;
    m_ArgsIsSet = true;
}

bool Instance::argsIsSet() const
{
    return m_ArgsIsSet;
}

void Instance::unsetArgs()
{
    m_ArgsIsSet = false;
}
std::shared_ptr<Create_instance_request_env> Instance::getEnv() const
{
    return m_Env;
}

void Instance::setEnv(const std::shared_ptr<Create_instance_request_env>& value)
{
    m_Env = value;
    m_EnvIsSet = true;
}

bool Instance::envIsSet() const
{
    return m_EnvIsSet;
}

void Instance::unsetEnv()
{
    m_EnvIsSet = false;
}
int32_t Instance::getStartCount() const
{
    return m_Start_count;
}

void Instance::setStartCount(int32_t value)
{
    m_Start_count = value;
    m_Start_countIsSet = true;
}

bool Instance::startCountIsSet() const
{
    return m_Start_countIsSet;
}

void Instance::unsetStart_count()
{
    m_Start_countIsSet = false;
}
utility::datetime Instance::getStartedAt() const
{
    return m_Started_at;
}

void Instance::setStartedAt(const utility::datetime& value)
{
    m_Started_at = value;
    m_Started_atIsSet = true;
}

bool Instance::startedAtIsSet() const
{
    return m_Started_atIsSet;
}

void Instance::unsetStarted_at()
{
    m_Started_atIsSet = false;
}
utility::datetime Instance::getStoppedAt() const
{
    return m_Stopped_at;
}

void Instance::setStoppedAt(const utility::datetime& value)
{
    m_Stopped_at = value;
    m_Stopped_atIsSet = true;
}

bool Instance::stoppedAtIsSet() const
{
    return m_Stopped_atIsSet;
}

void Instance::unsetStopped_at()
{
    m_Stopped_atIsSet = false;
}
int64_t Instance::getUptimeMs() const
{
    return m_Uptime_ms;
}

void Instance::setUptimeMs(int64_t value)
{
    m_Uptime_ms = value;
    m_Uptime_msIsSet = true;
}

bool Instance::uptimeMsIsSet() const
{
    return m_Uptime_msIsSet;
}

void Instance::unsetUptime_ms()
{
    m_Uptime_msIsSet = false;
}
int64_t Instance::getRssBytes() const
{
    return m_Rss_bytes;
}

void Instance::setRssBytes(int64_t value)
{
    m_Rss_bytes = value;
    m_Rss_bytesIsSet = true;
}

bool Instance::rssBytesIsSet() const
{
    return m_Rss_bytesIsSet;
}

void Instance::unsetRss_bytes()
{
    m_Rss_bytesIsSet = false;
}
int64_t Instance::getCpuTimeMs() const
{
    return m_Cpu_time_ms;
}

void Instance::setCpuTimeMs(int64_t value)
{
    m_Cpu_time_ms = value;
    m_Cpu_time_msIsSet = true;
}

bool Instance::cpuTimeMsIsSet() const
{
    return m_Cpu_time_msIsSet;
}

void Instance::unsetCpu_time_ms()
{
    m_Cpu_time_msIsSet = false;
}
int32_t Instance::getNconns() const
{
    return m_Nconns;
}

void Instance::setNconns(int32_t value)
{
    m_Nconns = value;
    m_NconnsIsSet = true;
}

bool Instance::nconnsIsSet() const
{
    return m_NconnsIsSet;
}

void Instance::unsetNconns()
{
    m_NconnsIsSet = false;
}
int32_t Instance::getNreqs() const
{
    return m_Nreqs;
}

void Instance::setNreqs(int32_t value)
{
    m_Nreqs = value;
    m_NreqsIsSet = true;
}

bool Instance::nreqsIsSet() const
{
    return m_NreqsIsSet;
}

void Instance::unsetNreqs()
{
    m_NreqsIsSet = false;
}
int32_t Instance::getNqueued() const
{
    return m_Nqueued;
}

void Instance::setNqueued(int32_t value)
{
    m_Nqueued = value;
    m_NqueuedIsSet = true;
}

bool Instance::nqueuedIsSet() const
{
    return m_NqueuedIsSet;
}

void Instance::unsetNqueued()
{
    m_NqueuedIsSet = false;
}
int64_t Instance::getNtotal() const
{
    return m_Ntotal;
}

void Instance::setNtotal(int64_t value)
{
    m_Ntotal = value;
    m_NtotalIsSet = true;
}

bool Instance::ntotalIsSet() const
{
    return m_NtotalIsSet;
}

void Instance::unsetNtotal()
{
    m_NtotalIsSet = false;
}
int32_t Instance::getVmmStartTimeUs() const
{
    return m_Vmm_start_time_us;
}

void Instance::setVmmStartTimeUs(int32_t value)
{
    m_Vmm_start_time_us = value;
    m_Vmm_start_time_usIsSet = true;
}

bool Instance::vmmStartTimeUsIsSet() const
{
    return m_Vmm_start_time_usIsSet;
}

void Instance::unsetVmm_start_time_us()
{
    m_Vmm_start_time_usIsSet = false;
}
int32_t Instance::getVmmLoadTimeUs() const
{
    return m_Vmm_load_time_us;
}

void Instance::setVmmLoadTimeUs(int32_t value)
{
    m_Vmm_load_time_us = value;
    m_Vmm_load_time_usIsSet = true;
}

bool Instance::vmmLoadTimeUsIsSet() const
{
    return m_Vmm_load_time_usIsSet;
}

void Instance::unsetVmm_load_time_us()
{
    m_Vmm_load_time_usIsSet = false;
}
int32_t Instance::getVmmReadyTimeUs() const
{
    return m_Vmm_ready_time_us;
}

void Instance::setVmmReadyTimeUs(int32_t value)
{
    m_Vmm_ready_time_us = value;
    m_Vmm_ready_time_usIsSet = true;
}

bool Instance::vmmReadyTimeUsIsSet() const
{
    return m_Vmm_ready_time_usIsSet;
}

void Instance::unsetVmm_ready_time_us()
{
    m_Vmm_ready_time_usIsSet = false;
}
int32_t Instance::getBootTimeUs() const
{
    return m_Boot_time_us;
}

void Instance::setBootTimeUs(int32_t value)
{
    m_Boot_time_us = value;
    m_Boot_time_usIsSet = true;
}

bool Instance::bootTimeUsIsSet() const
{
    return m_Boot_time_usIsSet;
}

void Instance::unsetBoot_time_us()
{
    m_Boot_time_usIsSet = false;
}
int32_t Instance::getNetTimeUs() const
{
    return m_Net_time_us;
}

void Instance::setNetTimeUs(int32_t value)
{
    m_Net_time_us = value;
    m_Net_time_usIsSet = true;
}

bool Instance::netTimeUsIsSet() const
{
    return m_Net_time_usIsSet;
}

void Instance::unsetNet_time_us()
{
    m_Net_time_usIsSet = false;
}
int32_t Instance::getStopReason() const
{
    return m_Stop_reason;
}

void Instance::setStopReason(int32_t value)
{
    m_Stop_reason = value;
    m_Stop_reasonIsSet = true;
}

bool Instance::stopReasonIsSet() const
{
    return m_Stop_reasonIsSet;
}

void Instance::unsetStop_reason()
{
    m_Stop_reasonIsSet = false;
}
int32_t Instance::getExitCode() const
{
    return m_Exit_code;
}

void Instance::setExitCode(int32_t value)
{
    m_Exit_code = value;
    m_Exit_codeIsSet = true;
}

bool Instance::exitCodeIsSet() const
{
    return m_Exit_codeIsSet;
}

void Instance::unsetExit_code()
{
    m_Exit_codeIsSet = false;
}
int32_t Instance::getStopCode() const
{
    return m_Stop_code;
}

void Instance::setStopCode(int32_t value)
{
    m_Stop_code = value;
    m_Stop_codeIsSet = true;
}

bool Instance::stopCodeIsSet() const
{
    return m_Stop_codeIsSet;
}

void Instance::unsetStop_code()
{
    m_Stop_codeIsSet = false;
}
utility::string_t Instance::getRestartPolicy() const
{
    return m_Restart_policy;
}

void Instance::setRestartPolicy(const utility::string_t& value)
{
    m_Restart_policy = value;
    m_Restart_policyIsSet = true;
}

bool Instance::restartPolicyIsSet() const
{
    return m_Restart_policyIsSet;
}

void Instance::unsetRestart_policy()
{
    m_Restart_policyIsSet = false;
}
std::shared_ptr<Instance_restart> Instance::getRestart() const
{
    return m_Restart;
}

void Instance::setRestart(const std::shared_ptr<Instance_restart>& value)
{
    m_Restart = value;
    m_RestartIsSet = true;
}

bool Instance::restartIsSet() const
{
    return m_RestartIsSet;
}

void Instance::unsetRestart()
{
    m_RestartIsSet = false;
}
int32_t Instance::getRestartCount() const
{
    return m_Restart_count;
}

void Instance::setRestartCount(int32_t value)
{
    m_Restart_count = value;
    m_Restart_countIsSet = true;
}

bool Instance::restartCountIsSet() const
{
    return m_Restart_countIsSet;
}

void Instance::unsetRestart_count()
{
    m_Restart_countIsSet = false;
}
std::shared_ptr<Create_instance_request_scale_to_zero> Instance::getScaleToZero() const
{
    return m_Scale_to_zero;
}

void Instance::setScaleToZero(const std::shared_ptr<Create_instance_request_scale_to_zero>& value)
{
    m_Scale_to_zero = value;
    m_Scale_to_zeroIsSet = true;
}

bool Instance::scaleToZeroIsSet() const
{
    return m_Scale_to_zeroIsSet;
}

void Instance::unsetScale_to_zero()
{
    m_Scale_to_zeroIsSet = false;
}
std::shared_ptr<Instance_snapshot> Instance::getSnapshot() const
{
    return m_Snapshot;
}

void Instance::setSnapshot(const std::shared_ptr<Instance_snapshot>& value)
{
    m_Snapshot = value;
    m_SnapshotIsSet = true;
}

bool Instance::snapshotIsSet() const
{
    return m_SnapshotIsSet;
}

void Instance::unsetSnapshot()
{
    m_SnapshotIsSet = false;
}
utility::string_t Instance::getPrivateFqdn() const
{
    return m_Private_fqdn;
}

void Instance::setPrivateFqdn(const utility::string_t& value)
{
    m_Private_fqdn = value;
    m_Private_fqdnIsSet = true;
}

bool Instance::privateFqdnIsSet() const
{
    return m_Private_fqdnIsSet;
}

void Instance::unsetPrivate_fqdn()
{
    m_Private_fqdnIsSet = false;
}
utility::string_t Instance::getPrivateIp() const
{
    return m_Private_ip;
}

void Instance::setPrivateIp(const utility::string_t& value)
{
    m_Private_ip = value;
    m_Private_ipIsSet = true;
}

bool Instance::privateIpIsSet() const
{
    return m_Private_ipIsSet;
}

void Instance::unsetPrivate_ip()
{
    m_Private_ipIsSet = false;
}
std::shared_ptr<Instance_service_group> Instance::getServiceGroup() const
{
    return m_Service_group;
}

void Instance::setServiceGroup(const std::shared_ptr<Instance_service_group>& value)
{
    m_Service_group = value;
    m_Service_groupIsSet = true;
}

bool Instance::serviceGroupIsSet() const
{
    return m_Service_groupIsSet;
}

void Instance::unsetService_group()
{
    m_Service_groupIsSet = false;
}
std::vector<std::shared_ptr<Create_instance_request_volumes_inner>>& Instance::getVolumes()
{
    return m_Volumes;
}

void Instance::setVolumes(const std::vector<std::shared_ptr<Create_instance_request_volumes_inner>>& value)
{
    m_Volumes = value;
    m_VolumesIsSet = true;
}

bool Instance::volumesIsSet() const
{
    return m_VolumesIsSet;
}

void Instance::unsetVolumes()
{
    m_VolumesIsSet = false;
}
std::vector<std::shared_ptr<Instance_network_interfaces_inner>>& Instance::getNetworkInterfaces()
{
    return m_Network_interfaces;
}

void Instance::setNetworkInterfaces(const std::vector<std::shared_ptr<Instance_network_interfaces_inner>>& value)
{
    m_Network_interfaces = value;
    m_Network_interfacesIsSet = true;
}

bool Instance::networkInterfacesIsSet() const
{
    return m_Network_interfacesIsSet;
}

void Instance::unsetNetwork_interfaces()
{
    m_Network_interfacesIsSet = false;
}
}
}
}
}


