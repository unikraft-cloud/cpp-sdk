/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef CLOUD_UNIKRAFT_V1_API_InstancesApiGMock_H_
#define CLOUD_UNIKRAFT_V1_API_InstancesApiGMock_H_

#include <gmock/gmock.h>

#include "InstancesApi.h"

namespace cloud {
namespace unikraft {
namespace v1 {
namespace api {

using namespace cloud::unikraft::v1::model;


class  InstancesApiMock : public IInstancesApi
{
public:
    using Base = IInstancesApi;

    InstancesApiMock() = default;
    explicit InstancesApiMock( std::shared_ptr<ApiClient> apiClient ) { };
    ~InstancesApiMock() override = default;

    MOCK_METHOD1( createInstance, pplx::task<std::shared_ptr<Create_instance_200_response>> (
        std::shared_ptr<Create_instance_request> createInstanceRequest
    ) );
    MOCK_METHOD1( deleteInstanceByUuid, pplx::task<std::shared_ptr<Delete_instances_200_response>> (
        utility::string_t uuid
    ) );
    MOCK_METHOD1( deleteInstances, pplx::task<std::shared_ptr<Delete_instances_200_response>> (
        boost::optional<std::vector<std::shared_ptr<Delete_instances_request_inner>>> deleteInstancesRequestInner
    ) );
    MOCK_METHOD3( getInstanceByUuid, pplx::task<std::shared_ptr<Get_instance_by_uuid_200_response>> (
        utility::string_t uuid,
        boost::optional<bool> details,
        boost::optional<bool> metrics
    ) );
    MOCK_METHOD1( getInstanceLogs, pplx::task<std::shared_ptr<Get_instance_logs_200_response>> (
        boost::optional<std::vector<std::shared_ptr<Get_instance_logs_request_inner>>> getInstanceLogsRequestInner
    ) );
    MOCK_METHOD1( getInstanceLogsByUuid, pplx::task<std::shared_ptr<Get_instance_logs_200_response>> (
        utility::string_t uuid
    ) );
    MOCK_METHOD1( getInstanceMetrics, pplx::task<std::shared_ptr<Get_instance_metrics_200_response>> (
        boost::optional<std::vector<std::shared_ptr<Get_instance_metrics_request_inner>>> getInstanceMetricsRequestInner
    ) );
    MOCK_METHOD1( getInstanceMetricsByUuid, pplx::task<std::shared_ptr<Get_instance_metrics_200_response>> (
        utility::string_t uuid
    ) );
    MOCK_METHOD3( getInstances, pplx::task<std::shared_ptr<Get_instances_200_response>> (
        boost::optional<bool> details,
        boost::optional<bool> metrics,
        boost::optional<std::vector<std::shared_ptr<Get_instances_request_inner>>> getInstancesRequestInner
    ) );
    MOCK_METHOD2( startInstanceByUuid, pplx::task<std::shared_ptr<Start_instances_200_response>> (
        utility::string_t uuid,
        boost::optional<int32_t> waitTimeoutMs
    ) );
    MOCK_METHOD1( startInstances, pplx::task<std::shared_ptr<Start_instances_200_response>> (
        boost::optional<std::vector<std::shared_ptr<Start_instances_request_inner>>> startInstancesRequestInner
    ) );
    MOCK_METHOD3( stopInstanceByUuid, pplx::task<std::shared_ptr<Start_instances_200_response>> (
        utility::string_t uuid,
        boost::optional<bool> force,
        boost::optional<int32_t> drainTimeoutMs
    ) );
    MOCK_METHOD1( stopInstances, pplx::task<std::shared_ptr<Start_instances_200_response>> (
        boost::optional<std::vector<std::shared_ptr<Stop_instances_request_inner>>> stopInstancesRequestInner
    ) );
    MOCK_METHOD1( waitForInstances, pplx::task<std::shared_ptr<Wait_for_instances_200_response>> (
        boost::optional<std::vector<std::shared_ptr<Wait_for_instances_request_inner>>> waitForInstancesRequestInner
    ) );
};

}
}
}
}

#endif /* CLOUD_UNIKRAFT_V1_API_InstancesApiGMock_H_ */

