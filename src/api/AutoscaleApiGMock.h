/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef CLOUD_UNIKRAFT_V1_API_AutoscaleApiGMock_H_
#define CLOUD_UNIKRAFT_V1_API_AutoscaleApiGMock_H_

#include <gmock/gmock.h>

#include "AutoscaleApi.h"

namespace cloud {
namespace unikraft {
namespace v1 {
namespace api {

using namespace cloud::unikraft::v1::model;


class  AutoscaleApiMock : public IAutoscaleApi
{
public:
    using Base = IAutoscaleApi;

    AutoscaleApiMock() = default;
    explicit AutoscaleApiMock( std::shared_ptr<ApiClient> apiClient ) { };
    ~AutoscaleApiMock() override = default;

    MOCK_METHOD1( createAutoscaleConfig, pplx::task<std::shared_ptr<Create_autoscale_config_200_response>> (
        std::shared_ptr<Create_autoscale_config_request> createAutoscaleConfigRequest
    ) );
    MOCK_METHOD2( createAutoscalePolicy, pplx::task<std::shared_ptr<Create_autoscale_policy_200_response>> (
        utility::string_t uuid,
        std::shared_ptr<Create_autoscale_policy_request> createAutoscalePolicyRequest
    ) );
    MOCK_METHOD1( deleteAutoscaleConfigByUuid, pplx::task<std::shared_ptr<Delete_autoscale_configs_200_response>> (
        utility::string_t uuid
    ) );
    MOCK_METHOD1( deleteAutoscaleConfigs, pplx::task<std::shared_ptr<Delete_autoscale_configs_200_response>> (
        boost::optional<std::vector<std::shared_ptr<Get_autoscale_configs_request_inner>>> getAutoscaleConfigsRequestInner
    ) );
    MOCK_METHOD2( deleteAutoscalePolicies, pplx::task<std::shared_ptr<Delete_autoscale_policies_200_response>> (
        utility::string_t uuid,
        boost::optional<std::vector<std::shared_ptr<Get_autosacle_policies_request_inner>>> getAutosaclePoliciesRequestInner
    ) );
    MOCK_METHOD2( deleteAutoscalePolicyByServiceUuidAndPolicyName, pplx::task<std::shared_ptr<Delete_autoscale_policy_by_service_uuid_and_policy_name_200_response>> (
        utility::string_t uuid,
        utility::string_t name
    ) );
    MOCK_METHOD2( getAutosaclePolicies, pplx::task<std::shared_ptr<Get_autosacle_policies_200_response>> (
        utility::string_t uuid,
        boost::optional<std::vector<std::shared_ptr<Get_autosacle_policies_request_inner>>> getAutosaclePoliciesRequestInner
    ) );
    MOCK_METHOD1( getAutoscaleConfigByServiceUuid, pplx::task<std::shared_ptr<Get_autoscale_configs_200_response>> (
        utility::string_t uuid
    ) );
    MOCK_METHOD1( getAutoscaleConfigs, pplx::task<std::shared_ptr<Get_autoscale_configs_200_response>> (
        boost::optional<std::vector<std::shared_ptr<Get_autoscale_configs_request_inner>>> getAutoscaleConfigsRequestInner
    ) );
    MOCK_METHOD2( getAutoscalePolicyByServiceUuidAndPolicyName, pplx::task<std::shared_ptr<Get_autoscale_policy_by_service_uuid_and_policy_name_200_response>> (
        utility::string_t uuid,
        utility::string_t name
    ) );
};

}
}
}
}

#endif /* CLOUD_UNIKRAFT_V1_API_AutoscaleApiGMock_H_ */

