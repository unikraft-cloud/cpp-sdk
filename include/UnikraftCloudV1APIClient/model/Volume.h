/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Volume.h
 *
 * 
 */

#ifndef CLOUD_UNIKRAFT_V1_MODEL_Volume_H_
#define CLOUD_UNIKRAFT_V1_MODEL_Volume_H_


#include "UnikraftCloudV1APIClient/ModelBase.h"

#include "UnikraftCloudV1APIClient/model/Volume_attached_to_inner.h"
#include <cpprest/details/basic_types.h>
#include "UnikraftCloudV1APIClient/model/Volume_mounted_by_inner.h"
#include <vector>

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {

class Volume_attached_to_inner;
class Volume_mounted_by_inner;


/// <summary>
/// 
/// </summary>
class  Volume
    : public ModelBase
{
public:
    Volume();
    virtual ~Volume();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Volume members

    /// <summary>
    /// The status of the response.  Note: Not when listing all existing volumes. 
    /// </summary>
    utility::string_t getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const utility::string_t& value);

    /// <summary>
    /// A volume can be in one of the following states:  State           | Description ----------------|--- &#x60;uninitialized&#x60; | The volume is scheduled to be created. &#x60;initialized&#x60;   | The volume is currently created and formatted. &#x60;available&#x60;     | The volume is healthy and available to be attached to an instance. &#x60;idle&#x60;          | The volume is healthy and attached to an instance. It is possible to [detach](https://unikraft.cloud/docs/api/v1/volumes/#detach) it in this state. &#x60;mounted&#x60;       | The volume is currently mounted in an instance. &#x60;busy&#x60;          | There are maintenance tasks running on the volume. &#x60;error&#x60;         | The volume is in an error state that needs inspection by a Unikraft Cloud engineer. 
    /// </summary>
    utility::string_t getState() const;
    bool stateIsSet() const;
    void unsetState();

    void setState(const utility::string_t& value);

    /// <summary>
    /// The UUID of the volume. 
    /// </summary>
    utility::string_t getUuid() const;
    bool uuidIsSet() const;
    void unsetUuid();

    void setUuid(const utility::string_t& value);

    /// <summary>
    /// The name of the volume. 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Size of the volume in megabytes. 
    /// </summary>
    int32_t getSizeMb() const;
    bool sizeMbIsSet() const;
    void unsetSize_mb();

    void setSizeMb(int32_t value);

    /// <summary>
    /// List of instances that this volume is attached to. 
    /// </summary>
    std::vector<std::shared_ptr<Volume_attached_to_inner>>& getAttachedTo();
    bool attachedToIsSet() const;
    void unsetAttached_to();

    void setAttachedTo(const std::vector<std::shared_ptr<Volume_attached_to_inner>>& value);

    /// <summary>
    /// List of instances that have this volume mounted. 
    /// </summary>
    std::vector<std::shared_ptr<Volume_mounted_by_inner>>& getMountedBy();
    bool mountedByIsSet() const;
    void unsetMounted_by();

    void setMountedBy(const std::vector<std::shared_ptr<Volume_mounted_by_inner>>& value);

    /// <summary>
    /// Indicates if the volume will stay alive when the last instance is deleted that this volume is attached to. 
    /// </summary>
    bool isPersistent() const;
    bool persistentIsSet() const;
    void unsetPersistent();

    void setPersistent(bool value);

    /// <summary>
    /// Date and time of creation in ISO8601. 
    /// </summary>
    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreated_at();

    void setCreatedAt(const utility::datetime& value);


protected:
    utility::string_t m_Status;
    bool m_StatusIsSet;
    utility::string_t m_State;
    bool m_StateIsSet;
    utility::string_t m_Uuid;
    bool m_UuidIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    int32_t m_Size_mb;
    bool m_Size_mbIsSet;
    std::vector<std::shared_ptr<Volume_attached_to_inner>> m_Attached_to;
    bool m_Attached_toIsSet;
    std::vector<std::shared_ptr<Volume_mounted_by_inner>> m_Mounted_by;
    bool m_Mounted_byIsSet;
    bool m_Persistent;
    bool m_PersistentIsSet;
    utility::datetime m_Created_at;
    bool m_Created_atIsSet;
};


}
}
}
}

#endif /* CLOUD_UNIKRAFT_V1_MODEL_Volume_H_ */
