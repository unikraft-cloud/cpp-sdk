/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Instance.h
 *
 * An application instance. 
 */

#ifndef CLOUD_UNIKRAFT_V1_MODEL_Instance_H_
#define CLOUD_UNIKRAFT_V1_MODEL_Instance_H_


#include "UnikraftCloudV1APIClient/ModelBase.h"

#include "UnikraftCloudV1APIClient/model/Create_instance_request_scale_to_zero.h"
#include "UnikraftCloudV1APIClient/model/Instance_service_group.h"
#include "UnikraftCloudV1APIClient/model/Instance_network_interfaces_inner.h"
#include "UnikraftCloudV1APIClient/model/Instance_restart.h"
#include <cpprest/details/basic_types.h>
#include "UnikraftCloudV1APIClient/model/Instance_snapshot.h"
#include "UnikraftCloudV1APIClient/model/Create_instance_request_env.h"
#include "UnikraftCloudV1APIClient/model/Create_instance_request_volumes_inner.h"
#include <vector>

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {

class Create_instance_request_env;
class Instance_restart;
class Create_instance_request_scale_to_zero;
class Instance_snapshot;
class Instance_service_group;
class Create_instance_request_volumes_inner;
class Instance_network_interfaces_inner;


/// <summary>
/// An application instance. 
/// </summary>
class  Instance
    : public ModelBase
{
public:
    Instance();
    virtual ~Instance();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Instance members

    /// <summary>
    /// The status of the response.  Note: Not when listing all existing instances. 
    /// </summary>
    utility::string_t getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const utility::string_t& value);

    /// <summary>
    /// The UUID of the instance. 
    /// </summary>
    utility::string_t getUuid() const;
    bool uuidIsSet() const;
    void unsetUuid();

    void setUuid(const utility::string_t& value);

    /// <summary>
    /// The name of the instance. The instance will receive a DNS entry in your private network of the form &#x60;&lt;name&gt;.internal&#x60;.  Note: If no name is specified a random name of the form &#x60;&lt;app&gt;-X&#x60; is auto-generated, where &#x60;&lt;app&gt;&#x60; is the application name taken from &#x60;image&#x60; (e.g., &#x60;myapp&#x60; for &#x60;../myapp:latest&#x60;) and &#x60;X&#x60; is a 5 character long random alphanumeric suffix. 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Date and time of creation in ISO8601. 
    /// </summary>
    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreated_at();

    void setCreatedAt(const utility::datetime& value);

    /// <summary>
    /// An instance can be in one of the following states:  State     | Description ----------|------------ &#x60;stopped&#x60; | The instance is not running and does not count against live resource quotas. Connections cannot be established. &#x60;starting&#x60;| The instance is booting up. This usually takes just a few milliseconds. &#x60;running&#x60; | Your application&#39;s main entry point has been reached. &#x60;draining&#x60;| The instance is draining connections before shutting down. No new connections can be established. &#x60;stopping&#x60;| The instance is shutting down. &#x60;standby&#x60; | The instance has [scale-to-zero](https://unikraft.cloud/docs/api/v1/autoscale#scaletozero) enabled. The instance is not running, but will be automatically started when there are incoming requests. 
    /// </summary>
    utility::string_t getState() const;
    bool stateIsSet() const;
    void unsetState();

    void setState(const utility::string_t& value);

    /// <summary>
    /// Digest of the image that the instance uses.  Note: The image tag (e.g., &#x60;latest&#x60;) is translated by Unikraft Cloud to the image digest that was assigned the tag at the time of instance creation. The image is pinned to this particular version. 
    /// </summary>
    utility::string_t getImage() const;
    bool imageIsSet() const;
    void unsetImage();

    void setImage(const utility::string_t& value);

    /// <summary>
    /// Amount of memory assigned to the instance in megabytes. 
    /// </summary>
    int32_t getMemoryMb() const;
    bool memoryMbIsSet() const;
    void unsetMemory_mb();

    void setMemoryMb(int32_t value);

    /// <summary>
    /// Application arguments. 
    /// </summary>
    std::vector<utility::string_t>& getArgs();
    bool argsIsSet() const;
    void unsetArgs();

    void setArgs(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Create_instance_request_env> getEnv() const;
    bool envIsSet() const;
    void unsetEnv();

    void setEnv(const std::shared_ptr<Create_instance_request_env>& value);

    /// <summary>
    /// Total number of times the instance has been started. 
    /// </summary>
    int32_t getStartCount() const;
    bool startCountIsSet() const;
    void unsetStart_count();

    void setStartCount(int32_t value);

    /// <summary>
    /// Date and time of last start in ISO8601. 
    /// </summary>
    utility::datetime getStartedAt() const;
    bool startedAtIsSet() const;
    void unsetStarted_at();

    void setStartedAt(const utility::datetime& value);

    /// <summary>
    /// If stopped, date and time of stop in ISO8601. 
    /// </summary>
    utility::datetime getStoppedAt() const;
    bool stoppedAtIsSet() const;
    void unsetStopped_at();

    void setStoppedAt(const utility::datetime& value);

    /// <summary>
    /// Total uptime in milliseconds. 
    /// </summary>
    int64_t getUptimeMs() const;
    bool uptimeMsIsSet() const;
    void unsetUptime_ms();

    void setUptimeMs(int64_t value);

    /// <summary>
    /// Resident set size (RSS) of the VMM in bytes (see [here](https://unikraft.cloud/docs/api/v1/instances/#metrics) for remarks on RSS).  Note: Only with &#x60;metrics&#x3D;true&#x60; query parameter. 
    /// </summary>
    int64_t getRssBytes() const;
    bool rssBytesIsSet() const;
    void unsetRss_bytes();

    void setRssBytes(int64_t value);

    /// <summary>
    /// Total consumed CPU time in milliseconds.  Note: Only with &#x60;metrics&#x3D;true&#x60; query parameter. 
    /// </summary>
    int64_t getCpuTimeMs() const;
    bool cpuTimeMsIsSet() const;
    void unsetCpu_time_ms();

    void setCpuTimeMs(int64_t value);

    /// <summary>
    /// Number of currently established inbound connections (non-HTTP).  Note: Only with &#x60;metrics&#x3D;true&#x60; query parameter. 
    /// </summary>
    int32_t getNconns() const;
    bool nconnsIsSet() const;
    void unsetNconns();

    void setNconns(int32_t value);

    /// <summary>
    /// Number of in-flight HTTP requests.  Note: Only with &#x60;metrics&#x3D;true&#x60; query parameter. 
    /// </summary>
    int32_t getNreqs() const;
    bool nreqsIsSet() const;
    void unsetNreqs();

    void setNreqs(int32_t value);

    /// <summary>
    /// Number of queued inbound connections and HTTP requests.  Note: Only with &#x60;metrics&#x3D;true&#x60; query parameter. 
    /// </summary>
    int32_t getNqueued() const;
    bool nqueuedIsSet() const;
    void unsetNqueued();

    void setNqueued(int32_t value);

    /// <summary>
    /// Total number of inbound connections and HTTP requests handled.  Note: Only with &#x60;metrics&#x3D;true&#x60; query parameter. 
    /// </summary>
    int64_t getNtotal() const;
    bool ntotalIsSet() const;
    void unsetNtotal();

    void setNtotal(int64_t value);

    /// <summary>
    /// Time from start of instance to VMM process start in microseconds.  Note: Only with Unikraft Cloud developer permissions. 
    /// </summary>
    int32_t getVmmStartTimeUs() const;
    bool vmmStartTimeUsIsSet() const;
    void unsetVmm_start_time_us();

    void setVmmStartTimeUs(int32_t value);

    /// <summary>
    /// Time from start of instance to finish loading of initrd and kernel into instance in microseconds.  Note: Only with Unikraft Cloud developer permissions. 
    /// </summary>
    int32_t getVmmLoadTimeUs() const;
    bool vmmLoadTimeUsIsSet() const;
    void unsetVmm_load_time_us();

    void setVmmLoadTimeUs(int32_t value);

    /// <summary>
    /// Time from start of instance to entering instance execution in microseconds.  Note: Only with Unikraft Cloud developer permissions. 
    /// </summary>
    int32_t getVmmReadyTimeUs() const;
    bool vmmReadyTimeUsIsSet() const;
    void unsetVmm_ready_time_us();

    void setVmmReadyTimeUs(int32_t value);

    /// <summary>
    /// Time from start of instance to finish booting of Unikraft in microseconds. 
    /// </summary>
    int32_t getBootTimeUs() const;
    bool bootTimeUsIsSet() const;
    void unsetBoot_time_us();

    void setBootTimeUs(int32_t value);

    /// <summary>
    /// Time from start of instance to first listen socket in microseconds.  Note: Only with Unikraft Cloud developer permissions. 
    /// </summary>
    int32_t getNetTimeUs() const;
    bool netTimeUsIsSet() const;
    void unsetNet_time_us();

    void setNetTimeUs(int32_t value);

    /// <summary>
    /// Reason for ongoing or current stop (see [here](https://unikraft.cloud/docs/api/v1/instances/#stopreason)). 
    /// </summary>
    int32_t getStopReason() const;
    bool stopReasonIsSet() const;
    void unsetStop_reason();

    void setStopReason(int32_t value);

    /// <summary>
    /// Exit code of the application. 
    /// </summary>
    int32_t getExitCode() const;
    bool exitCodeIsSet() const;
    void unsetExit_code();

    void setExitCode(int32_t value);

    /// <summary>
    /// Stop code of the kernel (see [here](https://unikraft.cloud/docs/api/v1/instances/#stopreason)). 
    /// </summary>
    int32_t getStopCode() const;
    bool stopCodeIsSet() const;
    void unsetStop_code();

    void setStopCode(int32_t value);

    /// <summary>
    /// When an instance stops either because the application exits or the instance crashes, Unikraft Cloud can auto-restart your instance. Auto-restarts are performed according to the restart policy configured for a particular instance. The policy can have the following values:  Policy       | Description -------------|------------ &#x60;always&#x60;     | Always restart the instance when the stop is initiated from within the instance (i.e., the application exits or the instance crashes). &#x60;on-failure&#x60; | Only restart the instance if it crashes. &#x60;never&#x60;      | Never restart the instance (default). 
    /// </summary>
    utility::string_t getRestartPolicy() const;
    bool restartPolicyIsSet() const;
    void unsetRestart_policy();

    void setRestartPolicy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Instance_restart> getRestart() const;
    bool restartIsSet() const;
    void unsetRestart();

    void setRestart(const std::shared_ptr<Instance_restart>& value);

    /// <summary>
    /// Total number of times the instance has been restarted by restart policy. 
    /// </summary>
    int32_t getRestartCount() const;
    bool restartCountIsSet() const;
    void unsetRestart_count();

    void setRestartCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Create_instance_request_scale_to_zero> getScaleToZero() const;
    bool scaleToZeroIsSet() const;
    void unsetScale_to_zero();

    void setScaleToZero(const std::shared_ptr<Create_instance_request_scale_to_zero>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Instance_snapshot> getSnapshot() const;
    bool snapshotIsSet() const;
    void unsetSnapshot();

    void setSnapshot(const std::shared_ptr<Instance_snapshot>& value);

    /// <summary>
    /// Fully-qualified domain name under which the instance is accessible in the private network. 
    /// </summary>
    utility::string_t getPrivateFqdn() const;
    bool privateFqdnIsSet() const;
    void unsetPrivate_fqdn();

    void setPrivateFqdn(const utility::string_t& value);

    /// <summary>
    /// Private IPv4 of the instance for communication between instances of the same user. This is equivalent to the IPv4 address of the first network interface. 
    /// </summary>
    utility::string_t getPrivateIp() const;
    bool privateIpIsSet() const;
    void unsetPrivate_ip();

    void setPrivateIp(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Instance_service_group> getServiceGroup() const;
    bool serviceGroupIsSet() const;
    void unsetService_group();

    void setServiceGroup(const std::shared_ptr<Instance_service_group>& value);

    /// <summary>
    /// Description of [volumes](https://unikraft.cloud/docs/api/v1/volumes). 
    /// </summary>
    std::vector<std::shared_ptr<Create_instance_request_volumes_inner>>& getVolumes();
    bool volumesIsSet() const;
    void unsetVolumes();

    void setVolumes(const std::vector<std::shared_ptr<Create_instance_request_volumes_inner>>& value);

    /// <summary>
    /// List of network interfaces attached to the instance. 
    /// </summary>
    std::vector<std::shared_ptr<Instance_network_interfaces_inner>>& getNetworkInterfaces();
    bool networkInterfacesIsSet() const;
    void unsetNetwork_interfaces();

    void setNetworkInterfaces(const std::vector<std::shared_ptr<Instance_network_interfaces_inner>>& value);


protected:
    utility::string_t m_Status;
    bool m_StatusIsSet;
    utility::string_t m_Uuid;
    bool m_UuidIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::datetime m_Created_at;
    bool m_Created_atIsSet;
    utility::string_t m_State;
    bool m_StateIsSet;
    utility::string_t m_Image;
    bool m_ImageIsSet;
    int32_t m_Memory_mb;
    bool m_Memory_mbIsSet;
    std::vector<utility::string_t> m_Args;
    bool m_ArgsIsSet;
    std::shared_ptr<Create_instance_request_env> m_Env;
    bool m_EnvIsSet;
    int32_t m_Start_count;
    bool m_Start_countIsSet;
    utility::datetime m_Started_at;
    bool m_Started_atIsSet;
    utility::datetime m_Stopped_at;
    bool m_Stopped_atIsSet;
    int64_t m_Uptime_ms;
    bool m_Uptime_msIsSet;
    int64_t m_Rss_bytes;
    bool m_Rss_bytesIsSet;
    int64_t m_Cpu_time_ms;
    bool m_Cpu_time_msIsSet;
    int32_t m_Nconns;
    bool m_NconnsIsSet;
    int32_t m_Nreqs;
    bool m_NreqsIsSet;
    int32_t m_Nqueued;
    bool m_NqueuedIsSet;
    int64_t m_Ntotal;
    bool m_NtotalIsSet;
    int32_t m_Vmm_start_time_us;
    bool m_Vmm_start_time_usIsSet;
    int32_t m_Vmm_load_time_us;
    bool m_Vmm_load_time_usIsSet;
    int32_t m_Vmm_ready_time_us;
    bool m_Vmm_ready_time_usIsSet;
    int32_t m_Boot_time_us;
    bool m_Boot_time_usIsSet;
    int32_t m_Net_time_us;
    bool m_Net_time_usIsSet;
    int32_t m_Stop_reason;
    bool m_Stop_reasonIsSet;
    int32_t m_Exit_code;
    bool m_Exit_codeIsSet;
    int32_t m_Stop_code;
    bool m_Stop_codeIsSet;
    utility::string_t m_Restart_policy;
    bool m_Restart_policyIsSet;
    std::shared_ptr<Instance_restart> m_Restart;
    bool m_RestartIsSet;
    int32_t m_Restart_count;
    bool m_Restart_countIsSet;
    std::shared_ptr<Create_instance_request_scale_to_zero> m_Scale_to_zero;
    bool m_Scale_to_zeroIsSet;
    std::shared_ptr<Instance_snapshot> m_Snapshot;
    bool m_SnapshotIsSet;
    utility::string_t m_Private_fqdn;
    bool m_Private_fqdnIsSet;
    utility::string_t m_Private_ip;
    bool m_Private_ipIsSet;
    std::shared_ptr<Instance_service_group> m_Service_group;
    bool m_Service_groupIsSet;
    std::vector<std::shared_ptr<Create_instance_request_volumes_inner>> m_Volumes;
    bool m_VolumesIsSet;
    std::vector<std::shared_ptr<Instance_network_interfaces_inner>> m_Network_interfaces;
    bool m_Network_interfacesIsSet;
};


}
}
}
}

#endif /* CLOUD_UNIKRAFT_V1_MODEL_Instance_H_ */
