/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Instance_metrics.h
 *
 * 
 */

#ifndef CLOUD_UNIKRAFT_V1_MODEL_Instance_metrics_H_
#define CLOUD_UNIKRAFT_V1_MODEL_Instance_metrics_H_


#include "UnikraftCloudV1APIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {



/// <summary>
/// 
/// </summary>
class  Instance_metrics
    : public ModelBase
{
public:
    Instance_metrics();
    virtual ~Instance_metrics();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Instance_metrics members

    /// <summary>
    /// The status of the response. 
    /// </summary>
    utility::string_t getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const utility::string_t& value);

    /// <summary>
    /// The UUID of the instance. 
    /// </summary>
    utility::string_t getUuid() const;
    bool uuidIsSet() const;
    void unsetUuid();

    void setUuid(const utility::string_t& value);

    /// <summary>
    /// The name of the instance. 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Resident set size of the VMM in bytes.  Note: The resident set size (RSS) specifies the amount of physical memory that has been touched by the instance and is currently reserved for the instance on the Unikraft Cloud server. The RSS grows until the instance has touched all memory assigned to it via the &#x60;memory_mb&#x60; setting and may also exceed this value as supporting services running outside the instance acquire memory. The RSS is different from the current amount of memory allocated by the application, which is likely to fluctuate over the lifetime of the application. The RSS is not a cumulative metric. When the instance is stopped &#x60;rss&#x60; goes down to 0. 
    /// </summary>
    int64_t getRssBytes() const;
    bool rssBytesIsSet() const;
    void unsetRss_bytes();

    void setRssBytes(int64_t value);

    /// <summary>
    /// Consumed CPU time in milliseconds. 
    /// </summary>
    int64_t getCpuTimeMs() const;
    bool cpuTimeMsIsSet() const;
    void unsetCpu_time_ms();

    void setCpuTimeMs(int64_t value);

    /// <summary>
    /// Total amount of bytes received from network. 
    /// </summary>
    int64_t getRxBytes() const;
    bool rxBytesIsSet() const;
    void unsetRx_bytes();

    void setRxBytes(int64_t value);

    /// <summary>
    /// Total count of packets received from network. 
    /// </summary>
    int64_t getRxPackets() const;
    bool rxPacketsIsSet() const;
    void unsetRx_packets();

    void setRxPackets(int64_t value);

    /// <summary>
    /// Total amount of bytes transmitted over network. 
    /// </summary>
    int64_t getTxBytes() const;
    bool txBytesIsSet() const;
    void unsetTx_bytes();

    void setTxBytes(int64_t value);

    /// <summary>
    /// Total count of packets transmitted over network. 
    /// </summary>
    int64_t getTxPackets() const;
    bool txPacketsIsSet() const;
    void unsetTx_packets();

    void setTxPackets(int64_t value);

    /// <summary>
    /// Number of currently established inbound connections (non-HTTP). 
    /// </summary>
    int32_t getNconns() const;
    bool nconnsIsSet() const;
    void unsetNconns();

    void setNconns(int32_t value);

    /// <summary>
    /// Number of in-flight HTTP requests. 
    /// </summary>
    int32_t getNreqs() const;
    bool nreqsIsSet() const;
    void unsetNreqs();

    void setNreqs(int32_t value);

    /// <summary>
    /// Number of queued inbound connections and HTTP requests. 
    /// </summary>
    int32_t getNqueued() const;
    bool nqueuedIsSet() const;
    void unsetNqueued();

    void setNqueued(int32_t value);

    /// <summary>
    /// Total number of inbound connections and HTTP requests handled. 
    /// </summary>
    int64_t getNtotal() const;
    bool ntotalIsSet() const;
    void unsetNtotal();

    void setNtotal(int64_t value);


protected:
    utility::string_t m_Status;
    bool m_StatusIsSet;
    utility::string_t m_Uuid;
    bool m_UuidIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    int64_t m_Rss_bytes;
    bool m_Rss_bytesIsSet;
    int64_t m_Cpu_time_ms;
    bool m_Cpu_time_msIsSet;
    int64_t m_Rx_bytes;
    bool m_Rx_bytesIsSet;
    int64_t m_Rx_packets;
    bool m_Rx_packetsIsSet;
    int64_t m_Tx_bytes;
    bool m_Tx_bytesIsSet;
    int64_t m_Tx_packets;
    bool m_Tx_packetsIsSet;
    int32_t m_Nconns;
    bool m_NconnsIsSet;
    int32_t m_Nreqs;
    bool m_NreqsIsSet;
    int32_t m_Nqueued;
    bool m_NqueuedIsSet;
    int64_t m_Ntotal;
    bool m_NtotalIsSet;
};


}
}
}
}

#endif /* CLOUD_UNIKRAFT_V1_MODEL_Instance_metrics_H_ */
