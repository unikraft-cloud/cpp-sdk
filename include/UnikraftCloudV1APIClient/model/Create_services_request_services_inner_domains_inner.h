/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Create_services_request_services_inner_domains_inner.h
 *
 * 
 */

#ifndef CLOUD_UNIKRAFT_V1_MODEL_Create_services_request_services_inner_domains_inner_H_
#define CLOUD_UNIKRAFT_V1_MODEL_Create_services_request_services_inner_domains_inner_H_


#include "UnikraftCloudV1APIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "UnikraftCloudV1APIClient/model/Create_services_request_services_inner_domains_inner_certificate.h"

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {

class Create_services_request_services_inner_domains_inner_certificate;


/// <summary>
/// 
/// </summary>
class  Create_services_request_services_inner_domains_inner
    : public ModelBase
{
public:
    Create_services_request_services_inner_domains_inner();
    virtual ~Create_services_request_services_inner_domains_inner();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Create_services_request_services_inner_domains_inner members

    /// <summary>
    /// Publicly accessible domain name  Note: The services published by the service will be accessible under the given domain names. If &#x60;name&#x60; is a fully-qualified domain name, that is it ends with a dot (&#x60;.&#x60;), the domain name is taken as-is. Otherwise, the metroâ€™s domain name is appended (e.g., &#x60;my-project&#x60; expands to &#x60;my-project.fra0.kraft.host&#x60;). If the given domain name is already in use by the current or a different user the operation fails. In addition, certain domain names cannot be used (e.g., &#x60;www.fra0.kraft.host&#x60;). 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Create_services_request_services_inner_domains_inner_certificate> getCertificate() const;
    bool certificateIsSet() const;
    void unsetCertificate();

    void setCertificate(const std::shared_ptr<Create_services_request_services_inner_domains_inner_certificate>& value);


protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
    std::shared_ptr<Create_services_request_services_inner_domains_inner_certificate> m_Certificate;
    bool m_CertificateIsSet;
};


}
}
}
}

#endif /* CLOUD_UNIKRAFT_V1_MODEL_Create_services_request_services_inner_domains_inner_H_ */
