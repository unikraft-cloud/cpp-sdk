/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Create_services_200_response_data_service_groups_inner_domains_inner_certificate.h
 *
 * TLS certificate used for the domain.  Note: Not for subdomains of &#x60;&lt;metro&gt;.kraft.host&#x60;. 
 */

#ifndef CLOUD_UNIKRAFT_V1_MODEL_Create_services_200_response_data_service_groups_inner_domains_inner_certificate_H_
#define CLOUD_UNIKRAFT_V1_MODEL_Create_services_200_response_data_service_groups_inner_domains_inner_certificate_H_


#include "UnikraftCloudV1APIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {



/// <summary>
/// TLS certificate used for the domain.  Note: Not for subdomains of &#x60;&lt;metro&gt;.kraft.host&#x60;. 
/// </summary>
class  Create_services_200_response_data_service_groups_inner_domains_inner_certificate
    : public ModelBase
{
public:
    Create_services_200_response_data_service_groups_inner_domains_inner_certificate();
    virtual ~Create_services_200_response_data_service_groups_inner_domains_inner_certificate();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Create_services_200_response_data_service_groups_inner_domains_inner_certificate members

    /// <summary>
    /// The UUID of the certificate. 
    /// </summary>
    utility::string_t getUuid() const;
    bool uuidIsSet() const;
    void unsetUuid();

    void setUuid(const utility::string_t& value);

    /// <summary>
    /// The name of the certificate. 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Current state of the certificate.  A certificate can be in one of the following states:  State     | Description ----------|------------ &#x60;pending&#x60; | The certificate request is pending while the certificate is being requested from the certification authority. During this phase any service using this certificate is not available if this is not a renewal. &#x60;valid&#x60;   | The certificate is valid and can be used for services. &#x60;error&#x60;   | The certificate request failed after multiple attempts. This can happen, for example, if your DNS configuration is not correct, you run into Let’s Encrypt™ quota limits, or the domain validation process failed for some other reason. There won’t be any further automatic attempts. If you need assistence please contact us via [support@unikraft.cloud](mailto:support@unikraft.cloud). 
    /// </summary>
    utility::string_t getState() const;
    bool stateIsSet() const;
    void unsetState();

    void setState(const utility::string_t& value);


protected:
    utility::string_t m_Uuid;
    bool m_UuidIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_State;
    bool m_StateIsSet;
};


}
}
}
}

#endif /* CLOUD_UNIKRAFT_V1_MODEL_Create_services_200_response_data_service_groups_inner_domains_inner_certificate_H_ */
