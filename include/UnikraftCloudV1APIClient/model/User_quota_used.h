/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * User_quota_used.h
 *
 * Used quota. 
 */

#ifndef CLOUD_UNIKRAFT_V1_MODEL_User_quota_used_H_
#define CLOUD_UNIKRAFT_V1_MODEL_User_quota_used_H_


#include "UnikraftCloudV1APIClient/ModelBase.h"


namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {



/// <summary>
/// Used quota. 
/// </summary>
class  User_quota_used
    : public ModelBase
{
public:
    User_quota_used();
    virtual ~User_quota_used();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// User_quota_used members

    /// <summary>
    /// Number of created instances. 
    /// </summary>
    int32_t getInstances() const;
    bool instancesIsSet() const;
    void unsetInstances();

    void setInstances(int32_t value);

    /// <summary>
    /// Number of instances that are not in the &#x60;stopped&#x60; state. 
    /// </summary>
    int32_t getLiveInstances() const;
    bool liveInstancesIsSet() const;
    void unsetLive_instances();

    void setLiveInstances(int32_t value);

    /// <summary>
    /// Amount of memory assigned to instances that are not in the &#x60;stopped&#x60; state in megabytes. 
    /// </summary>
    int32_t getLiveMemoryMb() const;
    bool liveMemoryMbIsSet() const;
    void unsetLive_memory_mb();

    void setLiveMemoryMb(int32_t value);

    /// <summary>
    /// Number of services. 
    /// </summary>
    int32_t getServiceGroups() const;
    bool serviceGroupsIsSet() const;
    void unsetService_groups();

    void setServiceGroups(int32_t value);

    /// <summary>
    /// Number of published network ports over all existing services. 
    /// </summary>
    int32_t getServices() const;
    bool servicesIsSet() const;
    void unsetServices();

    void setServices(int32_t value);

    /// <summary>
    /// Number of volumes. 
    /// </summary>
    int32_t getVolumes() const;
    bool volumesIsSet() const;
    void unsetVolumes();

    void setVolumes(int32_t value);

    /// <summary>
    /// Total size of all volumes in megabytes. 
    /// </summary>
    int32_t getTotalVolumeMb() const;
    bool totalVolumeMbIsSet() const;
    void unsetTotal_volume_mb();

    void setTotalVolumeMb(int32_t value);


protected:
    int32_t m_Instances;
    bool m_InstancesIsSet;
    int32_t m_Live_instances;
    bool m_Live_instancesIsSet;
    int32_t m_Live_memory_mb;
    bool m_Live_memory_mbIsSet;
    int32_t m_Service_groups;
    bool m_Service_groupsIsSet;
    int32_t m_Services;
    bool m_ServicesIsSet;
    int32_t m_Volumes;
    bool m_VolumesIsSet;
    int32_t m_Total_volume_mb;
    bool m_Total_volume_mbIsSet;
};


}
}
}
}

#endif /* CLOUD_UNIKRAFT_V1_MODEL_User_quota_used_H_ */
