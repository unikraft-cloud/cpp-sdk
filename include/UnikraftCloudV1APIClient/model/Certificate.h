/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Certificate.h
 *
 * SSL Certificate. 
 */

#ifndef CLOUD_UNIKRAFT_V1_MODEL_Certificate_H_
#define CLOUD_UNIKRAFT_V1_MODEL_Certificate_H_


#include "UnikraftCloudV1APIClient/ModelBase.h"

#include "UnikraftCloudV1APIClient/model/Certificate_service_groups_inner.h"
#include <cpprest/details/basic_types.h>
#include "UnikraftCloudV1APIClient/model/Certificate_validation.h"
#include <vector>

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {

class Certificate_validation;
class Certificate_service_groups_inner;


/// <summary>
/// SSL Certificate. 
/// </summary>
class  Certificate
    : public ModelBase
{
public:
    Certificate();
    virtual ~Certificate();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Certificate members

    /// <summary>
    /// The status of the response.  Note: Not when listing all existing certificates. 
    /// </summary>
    utility::string_t getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const utility::string_t& value);

    /// <summary>
    /// The UUID of the certificate. 
    /// </summary>
    utility::string_t getUuid() const;
    bool uuidIsSet() const;
    void unsetUuid();

    void setUuid(const utility::string_t& value);

    /// <summary>
    /// The name of the certificate. 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Date and time of creation in ISO8601. 
    /// </summary>
    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreated_at();

    void setCreatedAt(const utility::datetime& value);

    /// <summary>
    /// Common name (CN) of the certificate. 
    /// </summary>
    utility::string_t getCommonName() const;
    bool commonNameIsSet() const;
    void unsetCommon_name();

    void setCommonName(const utility::string_t& value);

    /// <summary>
    /// Current state of the certificate.  A certificate can be in one of the following states:  State     | Description ----------|------------ &#x60;pending&#x60; | The certificate request is pending while the certificate is being requested from the certification authority. During this phase any service using this certificate is not available if this is not a renewal. &#x60;valid&#x60;   | The certificate is valid and can be used for services. &#x60;error&#x60;   | The certificate request failed after multiple attempts. This can happen, for example, if your DNS configuration is not correct, you run into Let’s Encrypt™ quota limits, or the domain validation process failed for some other reason. There won’t be any further automatic attempts. If you need assistence please contact us via [support@unikraft.cloud](mailto:support@unikraft.cloud). 
    /// </summary>
    utility::string_t getState() const;
    bool stateIsSet() const;
    void unsetState();

    void setState(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Certificate_validation> getValidation() const;
    bool validationIsSet() const;
    void unsetValidation();

    void setValidation(const std::shared_ptr<Certificate_validation>& value);

    /// <summary>
    /// Certificate subject. 
    /// </summary>
    utility::string_t getSubject() const;
    bool subjectIsSet() const;
    void unsetSubject();

    void setSubject(const utility::string_t& value);

    /// <summary>
    /// Certificate issuer. 
    /// </summary>
    utility::string_t getIssuer() const;
    bool issuerIsSet() const;
    void unsetIssuer();

    void setIssuer(const utility::string_t& value);

    /// <summary>
    /// Certificate serial number. 
    /// </summary>
    utility::string_t getSerialNumber() const;
    bool serialNumberIsSet() const;
    void unsetSerial_number();

    void setSerialNumber(const utility::string_t& value);

    /// <summary>
    /// Date and time of beginning of validity in ISO8601. 
    /// </summary>
    utility::datetime getNotBefore() const;
    bool notBeforeIsSet() const;
    void unsetNot_before();

    void setNotBefore(const utility::datetime& value);

    /// <summary>
    /// Expiration date and time in ISO8601. 
    /// </summary>
    utility::datetime getNotAfter() const;
    bool notAfterIsSet() const;
    void unsetNot_after();

    void setNotAfter(const utility::datetime& value);

    /// <summary>
    /// Services using this certificate. 
    /// </summary>
    std::vector<std::shared_ptr<Certificate_service_groups_inner>>& getServiceGroups();
    bool serviceGroupsIsSet() const;
    void unsetService_groups();

    void setServiceGroups(const std::vector<std::shared_ptr<Certificate_service_groups_inner>>& value);


protected:
    utility::string_t m_Status;
    bool m_StatusIsSet;
    utility::string_t m_Uuid;
    bool m_UuidIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::datetime m_Created_at;
    bool m_Created_atIsSet;
    utility::string_t m_Common_name;
    bool m_Common_nameIsSet;
    utility::string_t m_State;
    bool m_StateIsSet;
    std::shared_ptr<Certificate_validation> m_Validation;
    bool m_ValidationIsSet;
    utility::string_t m_Subject;
    bool m_SubjectIsSet;
    utility::string_t m_Issuer;
    bool m_IssuerIsSet;
    utility::string_t m_Serial_number;
    bool m_Serial_numberIsSet;
    utility::datetime m_Not_before;
    bool m_Not_beforeIsSet;
    utility::datetime m_Not_after;
    bool m_Not_afterIsSet;
    std::vector<std::shared_ptr<Certificate_service_groups_inner>> m_Service_groups;
    bool m_Service_groupsIsSet;
};


}
}
}
}

#endif /* CLOUD_UNIKRAFT_V1_MODEL_Certificate_H_ */
