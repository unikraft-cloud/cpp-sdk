/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Instance_network_interfaces_inner.h
 *
 * 
 */

#ifndef CLOUD_UNIKRAFT_V1_MODEL_Instance_network_interfaces_inner_H_
#define CLOUD_UNIKRAFT_V1_MODEL_Instance_network_interfaces_inner_H_


#include "UnikraftCloudV1APIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {



/// <summary>
/// 
/// </summary>
class  Instance_network_interfaces_inner
    : public ModelBase
{
public:
    Instance_network_interfaces_inner();
    virtual ~Instance_network_interfaces_inner();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Instance_network_interfaces_inner members

    /// <summary>
    /// The UUID of the network interface. 
    /// </summary>
    utility::string_t getUuid() const;
    bool uuidIsSet() const;
    void unsetUuid();

    void setUuid(const utility::string_t& value);

    /// <summary>
    /// Private IPv4 of network interface. 
    /// </summary>
    utility::string_t getPrivateIp() const;
    bool privateIpIsSet() const;
    void unsetPrivate_ip();

    void setPrivateIp(const utility::string_t& value);

    /// <summary>
    /// MAC address of the network interface. 
    /// </summary>
    utility::string_t getMac() const;
    bool macIsSet() const;
    void unsetMac();

    void setMac(const utility::string_t& value);

    /// <summary>
    /// Amount of bytes received from interface.  Note: Only with &#x60;metrics&#x3D;true&#x60; query parameter. 
    /// </summary>
    int64_t getRxBytes() const;
    bool rxBytesIsSet() const;
    void unsetRx_bytes();

    void setRxBytes(int64_t value);

    /// <summary>
    /// Count of packets received from interface.  Note: Only with &#x60;metrics&#x3D;true&#x60; query parameter. 
    /// </summary>
    int64_t getRxPackets() const;
    bool rxPacketsIsSet() const;
    void unsetRx_packets();

    void setRxPackets(int64_t value);

    /// <summary>
    /// Amount of bytes transmitted over interface.  Note: Only with &#x60;metrics&#x3D;true&#x60; query parameter. 
    /// </summary>
    int64_t getTxBytes() const;
    bool txBytesIsSet() const;
    void unsetTx_bytes();

    void setTxBytes(int64_t value);

    /// <summary>
    /// Count of packets transmitted over interface.  Note: Only with &#x60;metrics&#x3D;true&#x60; query parameter. 
    /// </summary>
    int64_t getTxPackets() const;
    bool txPacketsIsSet() const;
    void unsetTx_packets();

    void setTxPackets(int64_t value);


protected:
    utility::string_t m_Uuid;
    bool m_UuidIsSet;
    utility::string_t m_Private_ip;
    bool m_Private_ipIsSet;
    utility::string_t m_Mac;
    bool m_MacIsSet;
    int64_t m_Rx_bytes;
    bool m_Rx_bytesIsSet;
    int64_t m_Rx_packets;
    bool m_Rx_packetsIsSet;
    int64_t m_Tx_bytes;
    bool m_Tx_bytesIsSet;
    int64_t m_Tx_packets;
    bool m_Tx_packetsIsSet;
};


}
}
}
}

#endif /* CLOUD_UNIKRAFT_V1_MODEL_Instance_network_interfaces_inner_H_ */
