/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Create_instance_request.h
 *
 * 
 */

#ifndef CLOUD_UNIKRAFT_V1_MODEL_Create_instance_request_H_
#define CLOUD_UNIKRAFT_V1_MODEL_Create_instance_request_H_


#include "UnikraftCloudV1APIClient/ModelBase.h"

#include "UnikraftCloudV1APIClient/model/Create_instance_request_scale_to_zero.h"
#include <cpprest/details/basic_types.h>
#include "UnikraftCloudV1APIClient/model/Create_instance_request_service_group.h"
#include "UnikraftCloudV1APIClient/model/Create_instance_request_env.h"
#include "UnikraftCloudV1APIClient/model/Create_instance_request_volumes_inner.h"
#include <vector>

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {

class Create_instance_request_env;
class Create_instance_request_scale_to_zero;
class Create_instance_request_volumes_inner;
class Create_instance_request_service_group;


/// <summary>
/// 
/// </summary>
class  Create_instance_request
    : public ModelBase
{
public:
    Create_instance_request();
    virtual ~Create_instance_request();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Create_instance_request members

    /// <summary>
    /// The name of the instance. The instance will receive a DNS entry in your private network of the form &#x60;&lt;name&gt;.internal&#x60;.  Note: If no name is specified a random name of the form &#x60;&lt;app&gt;-X&#x60; is auto-generated, where &#x60;&lt;app&gt;&#x60; is the application name taken from &#x60;image&#x60; (e.g., &#x60;myapp&#x60; for &#x60;../myapp:latest&#x60;) and &#x60;X&#x60; is a 5 character long random alphanumeric suffix. 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Digest of the image that the instance uses.  Note: The image tag (e.g., &#x60;latest&#x60;) is translated by Unikraft Cloud to the image digest that was assigned the tag at the time of instance creation. The image is pinned to this particular version. 
    /// </summary>
    utility::string_t getImage() const;
    bool imageIsSet() const;
    void unsetImage();

    void setImage(const utility::string_t& value);

    /// <summary>
    /// Application arguments. 
    /// </summary>
    std::vector<utility::string_t>& getArgs();
    bool argsIsSet() const;
    void unsetArgs();

    void setArgs(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Create_instance_request_env> getEnv() const;
    bool envIsSet() const;
    void unsetEnv();

    void setEnv(const std::shared_ptr<Create_instance_request_env>& value);

    /// <summary>
    /// Amount of memory assigned to the instance in megabytes. 
    /// </summary>
    int32_t getMemoryMb() const;
    bool memoryMbIsSet() const;
    void unsetMemory_mb();

    void setMemoryMb(int32_t value);

    /// <summary>
    /// When an instance stops either because the application exits or the instance crashes, Unikraft Cloud can auto-restart your instance. Auto-restarts are performed according to the restart policy configured for a particular instance. The policy can have the following values:  Policy       | Description -------------|------------ &#x60;always&#x60;     | Always restart the instance when the stop is initiated from within the instance (i.e., the application exits or the instance crashes). &#x60;on-failure&#x60; | Only restart the instance if it crashes. &#x60;never&#x60;      | Never restart the instance (default). 
    /// </summary>
    utility::string_t getRestartPolicy() const;
    bool restartPolicyIsSet() const;
    void unsetRestart_policy();

    void setRestartPolicy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Create_instance_request_scale_to_zero> getScaleToZero() const;
    bool scaleToZeroIsSet() const;
    void unsetScale_to_zero();

    void setScaleToZero(const std::shared_ptr<Create_instance_request_scale_to_zero>& value);

    /// <summary>
    /// Description of [volumes](https://unikraft.cloud/docs/api/v1/volumes). 
    /// </summary>
    std::vector<std::shared_ptr<Create_instance_request_volumes_inner>>& getVolumes();
    bool volumesIsSet() const;
    void unsetVolumes();

    void setVolumes(const std::vector<std::shared_ptr<Create_instance_request_volumes_inner>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Create_instance_request_service_group> getServiceGroup() const;
    bool serviceGroupIsSet() const;
    void unsetService_group();

    void setServiceGroup(const std::shared_ptr<Create_instance_request_service_group>& value);

    /// <summary>
    /// Autostart behavior. If &#x60;true&#x60; the instance will start immediately after creation. 
    /// </summary>
    bool isAutostart() const;
    bool autostartIsSet() const;
    void unsetAutostart();

    void setAutostart(bool value);

    /// <summary>
    /// Number of instance replicas to create with these properties. 
    /// </summary>
    int32_t getReplicas() const;
    bool replicasIsSet() const;
    void unsetReplicas();

    void setReplicas(int32_t value);

    /// <summary>
    /// Timeout to wait for all new instances to reach running state in milliseconds. No wait performed for &#x60;0&#x60;  Note: Only valid if &#x60;autostart&#x60; is &#x60;true&#x60;. The maximum timeout may vary. Use &#x60;-1&#x60; for the largest possible value. 
    /// </summary>
    int32_t getWaitTimeoutMs() const;
    bool waitTimeoutMsIsSet() const;
    void unsetWait_timeout_ms();

    void setWaitTimeoutMs(int32_t value);

    /// <summary>
    /// Set of features to enable for the instance (see [below](https://unikraft.cloud/docs/api/v1/instances/#features)). 
    /// </summary>
    std::vector<utility::string_t>& getFeatures();
    bool featuresIsSet() const;
    void unsetFeatures();

    void setFeatures(const std::vector<utility::string_t>& value);


protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Image;
    bool m_ImageIsSet;
    std::vector<utility::string_t> m_Args;
    bool m_ArgsIsSet;
    std::shared_ptr<Create_instance_request_env> m_Env;
    bool m_EnvIsSet;
    int32_t m_Memory_mb;
    bool m_Memory_mbIsSet;
    utility::string_t m_Restart_policy;
    bool m_Restart_policyIsSet;
    std::shared_ptr<Create_instance_request_scale_to_zero> m_Scale_to_zero;
    bool m_Scale_to_zeroIsSet;
    std::vector<std::shared_ptr<Create_instance_request_volumes_inner>> m_Volumes;
    bool m_VolumesIsSet;
    std::shared_ptr<Create_instance_request_service_group> m_Service_group;
    bool m_Service_groupIsSet;
    bool m_Autostart;
    bool m_AutostartIsSet;
    int32_t m_Replicas;
    bool m_ReplicasIsSet;
    int32_t m_Wait_timeout_ms;
    bool m_Wait_timeout_msIsSet;
    std::vector<utility::string_t> m_Features;
    bool m_FeaturesIsSet;
};


}
}
}
}

#endif /* CLOUD_UNIKRAFT_V1_MODEL_Create_instance_request_H_ */
