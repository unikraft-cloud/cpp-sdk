/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Create_instance_request_scale_to_zero.h
 *
 * With conventional cloud platforms you need to keep at least one instance running at all times to be able to respond to incoming requests. Performing a just-in-time cold boot is simply too time-consuming and would create a response latency of multiple seconds. This is not the case with Unikraft Cloud. Instances on Unikraft Cloud are able to cold boot within milliseconds, which allows us to perform low-latency scale-to-zero.  To enable scale-to-zero for an instance it is sufficient to add a &#x60;scale_to_zero&#x60; configuration block. Unikraft Cloud will then put the instance into standby if there is no traffic to your service within the window of a cooldown period. When there is new traffic coming in, it is automatically started again.  If you have a heavyweight application that takes long to cold boot or has bad first request latency (e.g., with JIT compilation) consider to enable [stateful scale-to-zero](https://unikraft.cloud/docs/api/v1/instances/#scaletozero_stateful). 
 */

#ifndef CLOUD_UNIKRAFT_V1_MODEL_Create_instance_request_scale_to_zero_H_
#define CLOUD_UNIKRAFT_V1_MODEL_Create_instance_request_scale_to_zero_H_


#include "UnikraftCloudV1APIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {



/// <summary>
/// With conventional cloud platforms you need to keep at least one instance running at all times to be able to respond to incoming requests. Performing a just-in-time cold boot is simply too time-consuming and would create a response latency of multiple seconds. This is not the case with Unikraft Cloud. Instances on Unikraft Cloud are able to cold boot within milliseconds, which allows us to perform low-latency scale-to-zero.  To enable scale-to-zero for an instance it is sufficient to add a &#x60;scale_to_zero&#x60; configuration block. Unikraft Cloud will then put the instance into standby if there is no traffic to your service within the window of a cooldown period. When there is new traffic coming in, it is automatically started again.  If you have a heavyweight application that takes long to cold boot or has bad first request latency (e.g., with JIT compilation) consider to enable [stateful scale-to-zero](https://unikraft.cloud/docs/api/v1/instances/#scaletozero_stateful). 
/// </summary>
class  Create_instance_request_scale_to_zero
    : public ModelBase
{
public:
    Create_instance_request_scale_to_zero();
    virtual ~Create_instance_request_scale_to_zero();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Create_instance_request_scale_to_zero members

    /// <summary>
    /// With the scale-to-zero policy you define under which circumstances Unikraft Cloud should put your instance into standby.  Unikraft Cloud currently supports the following scale-to-zero policies:  Policy | Description -------|------------ &#x60;on&#x60;   | Scale-to-zero is enabled. When there are no TCP connections or HTTP requests for the duration of the cooldown time, the instance is put into standby &#x60;off&#x60;  | Scale-to-zero is not enabled. The instance keep on running until manually stopped &#x60;idle&#x60; | Same as &#x60;on&#x60;, but also puts the instance into standby when there are TCP connections established that have been inactive for the duration of the cooldown time. The connections remain established and incoming packets wake up the instance. Scale-to-zero does not happen while there are active HTTP requests (i.e., traffic on ports, which have been marked with the &#x60;http&#x60; handler as described [here](https://unikraft.cloud/docs/api/v1/services#handlers)) 
    /// </summary>
    utility::string_t getPolicy() const;
    bool policyIsSet() const;
    void unsetPolicy();

    void setPolicy(const utility::string_t& value);

    /// <summary>
    /// Whether to use [stateful](https://unikraft.cloud/docs/api/v1/instances/#scaletozero_stateful) scale-to-zero. 
    /// </summary>
    bool isStateful() const;
    bool statefulIsSet() const;
    void unsetStateful();

    void setStateful(bool value);

    /// <summary>
    /// Cooldown time in milliseconds. 
    /// </summary>
    int32_t getCooldownTimeMs() const;
    bool cooldownTimeMsIsSet() const;
    void unsetCooldown_time_ms();

    void setCooldownTimeMs(int32_t value);


protected:
    utility::string_t m_Policy;
    bool m_PolicyIsSet;
    bool m_Stateful;
    bool m_StatefulIsSet;
    int32_t m_Cooldown_time_ms;
    bool m_Cooldown_time_msIsSet;
};


}
}
}
}

#endif /* CLOUD_UNIKRAFT_V1_MODEL_Create_instance_request_scale_to_zero_H_ */
