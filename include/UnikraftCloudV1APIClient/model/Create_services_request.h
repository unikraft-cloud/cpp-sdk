/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Create_services_request.h
 *
 * 
 */

#ifndef CLOUD_UNIKRAFT_V1_MODEL_Create_services_request_H_
#define CLOUD_UNIKRAFT_V1_MODEL_Create_services_request_H_


#include "UnikraftCloudV1APIClient/ModelBase.h"

#include "UnikraftCloudV1APIClient/model/Create_services_request_services_inner.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {

class Create_services_request_services_inner;


/// <summary>
/// 
/// </summary>
class  Create_services_request
    : public ModelBase
{
public:
    Create_services_request();
    virtual ~Create_services_request();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Create_services_request members

    /// <summary>
    /// The name of the service  Note: If no name is specified a random name of the form &#x60;&lt;word&gt;-&lt;word&gt;-&lt;random&gt;&#x60; is auto-generated, where &#x60;&lt;random&gt;&#x60; is an 8 characters long random alphanumeric suffix. 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Create_services_request_services_inner>>& getServices();
    bool servicesIsSet() const;
    void unsetServices();

    void setServices(const std::vector<std::shared_ptr<Create_services_request_services_inner>>& value);


protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
    std::vector<std::shared_ptr<Create_services_request_services_inner>> m_Services;
    bool m_ServicesIsSet;
};


}
}
}
}

#endif /* CLOUD_UNIKRAFT_V1_MODEL_Create_services_request_H_ */
