/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Create_autoscale_config_request.h
 *
 * 
 */

#ifndef CLOUD_UNIKRAFT_V1_MODEL_Create_autoscale_config_request_H_
#define CLOUD_UNIKRAFT_V1_MODEL_Create_autoscale_config_request_H_


#include "UnikraftCloudV1APIClient/ModelBase.h"

#include "UnikraftCloudV1APIClient/model/Create_autoscale_config_request_master.h"
#include <cpprest/details/basic_types.h>

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {

class Create_autoscale_config_request_master;


/// <summary>
/// 
/// </summary>
class  Create_autoscale_config_request
    : public ModelBase
{
public:
    Create_autoscale_config_request();
    virtual ~Create_autoscale_config_request();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Create_autoscale_config_request members

    /// <summary>
    /// The UUID of the service for which to create a configuration.  Note: This property is mutually exclusive with &#x60;name&#x60; and either &#x60;uuid&#x60; or &#x60;name&#x60; are required. 
    /// </summary>
    utility::string_t getUuid() const;
    bool uuidIsSet() const;
    void unsetUuid();

    void setUuid(const utility::string_t& value);

    /// <summary>
    /// The name of the service for which to create a configuration.  Note: This property is mutually exclusive with &#x60;name&#x60; and either &#x60;uuid&#x60; or &#x60;name&#x60; are required. 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Minimum number of instances. 
    /// </summary>
    int32_t getMinSize() const;
    bool minSizeIsSet() const;
    void unsetMin_size();

    void setMinSize(int32_t value);

    /// <summary>
    /// Maximum number of instances. 
    /// </summary>
    int32_t getMaxSize() const;
    bool maxSizeIsSet() const;
    void unsetMax_size();

    void setMaxSize(int32_t value);

    /// <summary>
    /// Length of [warmup phase](https://unikraft.cloud/docs/api/v1/autoscale/#warmup-and-cooldown) in milliseconds. 
    /// </summary>
    int32_t getWarmupTimeMs() const;
    bool warmupTimeMsIsSet() const;
    void unsetWarmup_time_ms();

    void setWarmupTimeMs(int32_t value);

    /// <summary>
    /// Length of [cooldown phase](https://unikraft.cloud/docs/api/v1/autoscale/#warmup-and-cooldown) in milliseconds. 
    /// </summary>
    int32_t getCooldownTimeMs() const;
    bool cooldownTimeMsIsSet() const;
    void unsetCooldown_time_ms();

    void setCooldownTimeMs(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Create_autoscale_config_request_master> getMaster() const;
    bool masterIsSet() const;
    void unsetMaster();

    void setMaster(const std::shared_ptr<Create_autoscale_config_request_master>& value);


protected:
    utility::string_t m_Uuid;
    bool m_UuidIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    int32_t m_Min_size;
    bool m_Min_sizeIsSet;
    int32_t m_Max_size;
    bool m_Max_sizeIsSet;
    int32_t m_Warmup_time_ms;
    bool m_Warmup_time_msIsSet;
    int32_t m_Cooldown_time_ms;
    bool m_Cooldown_time_msIsSet;
    std::shared_ptr<Create_autoscale_config_request_master> m_Master;
    bool m_MasterIsSet;
};


}
}
}
}

#endif /* CLOUD_UNIKRAFT_V1_MODEL_Create_autoscale_config_request_H_ */
