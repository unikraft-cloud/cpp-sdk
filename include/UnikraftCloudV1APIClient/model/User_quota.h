/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * User_quota.h
 *
 * 
 */

#ifndef CLOUD_UNIKRAFT_V1_MODEL_User_quota_H_
#define CLOUD_UNIKRAFT_V1_MODEL_User_quota_H_


#include "UnikraftCloudV1APIClient/ModelBase.h"

#include "UnikraftCloudV1APIClient/model/User_quota_limits.h"
#include "UnikraftCloudV1APIClient/model/User_quota_used.h"
#include "UnikraftCloudV1APIClient/Object.h"

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {

class User_quota_used;
class User_quota_limits;


/// <summary>
/// 
/// </summary>
class  User_quota
    : public ModelBase
{
public:
    User_quota();
    virtual ~User_quota();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// User_quota members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<User_quota_used> getUsed() const;
    bool usedIsSet() const;
    void unsetUsed();

    void setUsed(const std::shared_ptr<User_quota_used>& value);

    /// <summary>
    /// Hard quota limits. 
    /// </summary>
    std::shared_ptr<Object> getHard() const;
    bool hardIsSet() const;
    void unsetHard();

    void setHard(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<User_quota_limits> getLimits() const;
    bool limitsIsSet() const;
    void unsetLimits();

    void setLimits(const std::shared_ptr<User_quota_limits>& value);


protected:
    std::shared_ptr<User_quota_used> m_Used;
    bool m_UsedIsSet;
    std::shared_ptr<Object> m_Hard;
    bool m_HardIsSet;
    std::shared_ptr<User_quota_limits> m_Limits;
    bool m_LimitsIsSet;
};


}
}
}
}

#endif /* CLOUD_UNIKRAFT_V1_MODEL_User_quota_H_ */
