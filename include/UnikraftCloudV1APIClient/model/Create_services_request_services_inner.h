/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Create_services_request_services_inner.h
 *
 * 
 */

#ifndef CLOUD_UNIKRAFT_V1_MODEL_Create_services_request_services_inner_H_
#define CLOUD_UNIKRAFT_V1_MODEL_Create_services_request_services_inner_H_


#include "UnikraftCloudV1APIClient/ModelBase.h"

#include "UnikraftCloudV1APIClient/model/Create_services_request_services_inner_domains_inner.h"
#include "UnikraftCloudV1APIClient/model/Service_mapping.h"
#include <vector>

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {

class Service_mapping;
class Create_services_request_services_inner_domains_inner;


/// <summary>
/// 
/// </summary>
class  Create_services_request_services_inner
    : public ModelBase
{
public:
    Create_services_request_services_inner();
    virtual ~Create_services_request_services_inner();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Create_services_request_services_inner members

    /// <summary>
    /// Public-facing port
    /// </summary>
    int32_t getPort() const;
    bool portIsSet() const;
    void unsetPort();

    void setPort(int32_t value);

    /// <summary>
    /// Port that the application listens on.  Default: Same as &#x60;port&#x60; 
    /// </summary>
    int32_t getDestinationPort() const;
    bool destinationPortIsSet() const;
    void unsetDestination_port();

    void setDestinationPort(int32_t value);

    /// <summary>
    /// See [&#x60;Connection Handlers&#x60;](https://unikraft.cloud/docs/api/v1/services/#handlers). 
    /// </summary>
    std::vector<std::shared_ptr<Service_mapping>>& getHandlers();
    bool handlersIsSet() const;
    void unsetHandlers();

    void setHandlers(const std::vector<std::shared_ptr<Service_mapping>>& value);

    /// <summary>
    /// Description of domains to associate with the service.  Default: auto-generated. Note: If &#x60;name&#x60; is specified without also providing a domain, a domain is derived from &#x60;name&#x60; by appending an 8 characters long random alphanumeric suffix and the metro&#39;s domain name. For example, setting the name to &#x60;my-project&#x60; without also providing a domain results in an auto-generated domain of &#x60;my-project-&lt;random&gt;.fra0.kraft.host&#x60;. 
    /// </summary>
    std::vector<std::shared_ptr<Create_services_request_services_inner_domains_inner>>& getDomains();
    bool domainsIsSet() const;
    void unsetDomains();

    void setDomains(const std::vector<std::shared_ptr<Create_services_request_services_inner_domains_inner>>& value);


protected:
    int32_t m_Port;
    bool m_PortIsSet;
    int32_t m_Destination_port;
    bool m_Destination_portIsSet;
    std::vector<std::shared_ptr<Service_mapping>> m_Handlers;
    bool m_HandlersIsSet;
    std::vector<std::shared_ptr<Create_services_request_services_inner_domains_inner>> m_Domains;
    bool m_DomainsIsSet;
};


}
}
}
}

#endif /* CLOUD_UNIKRAFT_V1_MODEL_Create_services_request_services_inner_H_ */
