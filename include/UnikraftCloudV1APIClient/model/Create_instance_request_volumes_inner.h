/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Create_instance_request_volumes_inner.h
 *
 * 
 */

#ifndef CLOUD_UNIKRAFT_V1_MODEL_Create_instance_request_volumes_inner_H_
#define CLOUD_UNIKRAFT_V1_MODEL_Create_instance_request_volumes_inner_H_


#include "UnikraftCloudV1APIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace cloud {
namespace unikraft {
namespace v1 {
namespace model {



/// <summary>
/// 
/// </summary>
class  Create_instance_request_volumes_inner
    : public ModelBase
{
public:
    Create_instance_request_volumes_inner();
    virtual ~Create_instance_request_volumes_inner();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Create_instance_request_volumes_inner members

    /// <summary>
    /// UUID of an existing volume. Must be in &#x60;available&#x60; [state](https://unikraft.cloud/docs/api/v1/volumes#states). 
    /// </summary>
    utility::string_t getUuid() const;
    bool uuidIsSet() const;
    void unsetUuid();

    void setUuid(const utility::string_t& value);

    /// <summary>
    /// The name of the volume to attach.  Note: You need to specify either &#x60;uuid&#x60;, &#x60;name&#x60;, or &#x60;size_mb&#x60;. Specifying &#x60;size_mb&#x60; will create a new [volume](https://unikraft.cloud/docs/api/v1/volumes) and attach it to the instance. The volume will receive an auto-generated name. 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Path of the mountpoint. Must be empty. Automatically created if it does not exist. 
    /// </summary>
    utility::string_t getAt() const;
    bool atIsSet() const;
    void unsetAt();

    void setAt(const utility::string_t& value);

    /// <summary>
    /// Whether the volume should be mounted read-only. 
    /// </summary>
    bool isReadonly() const;
    bool readonlyIsSet() const;
    void unsetReadonly();

    void setReadonly(bool value);


protected:
    utility::string_t m_Uuid;
    bool m_UuidIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_At;
    bool m_AtIsSet;
    bool m_Readonly;
    bool m_ReadonlyIsSet;
};


}
}
}
}

#endif /* CLOUD_UNIKRAFT_V1_MODEL_Create_instance_request_volumes_inner_H_ */
