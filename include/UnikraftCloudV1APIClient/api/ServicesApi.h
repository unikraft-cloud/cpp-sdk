/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ServicesApi.h
 *
 * 
 */

#ifndef CLOUD_UNIKRAFT_V1_API_ServicesApi_H_
#define CLOUD_UNIKRAFT_V1_API_ServicesApi_H_



#include "UnikraftCloudV1APIClient/ApiClient.h"

#include "UnikraftCloudV1APIClient/model/Create_services_200_response.h"
#include "UnikraftCloudV1APIClient/model/Create_services_request.h"
#include "UnikraftCloudV1APIClient/model/Delete_services_200_response.h"
#include "UnikraftCloudV1APIClient/model/Delete_services_request_inner.h"
#include "UnikraftCloudV1APIClient/model/Get_certificates_default_response.h"
#include "UnikraftCloudV1APIClient/model/Get_service_by_uuid_200_response.h"
#include "UnikraftCloudV1APIClient/model/Get_services_200_response.h"
#include "UnikraftCloudV1APIClient/model/Get_services_request_inner.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace cloud {
namespace unikraft {
namespace v1 {
namespace api {

using namespace cloud::unikraft::v1::model;

class  IServicesApi
{
public:
    IServicesApi() = default;
    virtual ~IServicesApi() = default;

    virtual pplx::task<std::shared_ptr<Create_services_200_response>> createServices(
        std::shared_ptr<Create_services_request> createServicesRequest
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Delete_services_200_response>> deleteServiceByUuid(
        utility::string_t uuid
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Delete_services_200_response>> deleteServices(
        boost::optional<std::vector<std::shared_ptr<Delete_services_request_inner>>> deleteServicesRequestInner
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Get_service_by_uuid_200_response>> getServiceByUuid(
        utility::string_t uuid,
        boost::optional<bool> details
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Get_services_200_response>> getServices(
        boost::optional<bool> details,
        boost::optional<std::vector<std::shared_ptr<Get_services_request_inner>>> getServicesRequestInner
    ) const = 0;
};

class  ServicesApi  : public IServicesApi 
{
public:
    using Base = IServicesApi;

    explicit ServicesApi( std::shared_ptr<const ApiClient> apiClient );

    ~ServicesApi() override;

    /// <summary>
    /// Create a service
    /// </summary>
    /// <remarks>
    /// Creates a new service with the given configuration. Note that the service properties like published ports can only be defined during creation. They cannot be changed later. 
    /// </remarks>
    /// <param name="createServicesRequest"></param>
    pplx::task<std::shared_ptr<Create_services_200_response>> createServices(
        std::shared_ptr<Create_services_request> createServicesRequest
    ) const override;
    /// <summary>
    /// Delete a service given its UUID
    /// </summary>
    /// <remarks>
    /// Deletes the specified service. Fails if there are still instances attached to the service. After this call the IDs associated with the service are no longer valid and the domain name is released. 
    /// </remarks>
    /// <param name="uuid">The UUID of the resource. The UUID is a 36-character string that uniquely identifies the resource. The UUID is returned by the API after creating a resource. </param>
    pplx::task<std::shared_ptr<Delete_services_200_response>> deleteServiceByUuid(
        utility::string_t uuid
    ) const override;
    /// <summary>
    /// Delete one or more services
    /// </summary>
    /// <remarks>
    /// Deletes the specified service(s). Fails if there are still instances attached to the service. After this call the IDs associated with the service are no longer valid and the domain name is released. 
    /// </remarks>
    /// <param name="deleteServicesRequestInner"> (optional)</param>
    pplx::task<std::shared_ptr<Delete_services_200_response>> deleteServices(
        boost::optional<std::vector<std::shared_ptr<Delete_services_request_inner>>> deleteServicesRequestInner
    ) const override;
    /// <summary>
    /// Get the status of a service given its UUID
    /// </summary>
    /// <remarks>
    /// Returns the current status and the configuration of a particular service if a UUID or name is specified. Otherwise, returns the current status and configuration of all services. 
    /// </remarks>
    /// <param name="uuid">The UUID of the resource. The UUID is a 36-character string that uniquely identifies the resource. The UUID is returned by the API after creating a resource. </param>
    /// <param name="details">Whether to provide detailed status and configuration information.  (optional, default to false)</param>
    pplx::task<std::shared_ptr<Get_service_by_uuid_200_response>> getServiceByUuid(
        utility::string_t uuid,
        boost::optional<bool> details
    ) const override;
    /// <summary>
    /// Get the status of one or more services
    /// </summary>
    /// <remarks>
    /// Returns the current status and the configuration of a particular service if a UUID or name is specified. Otherwise, returns the current status and configuration of all services. 
    /// </remarks>
    /// <param name="details">Whether to provide detailed status and configuration information.  (optional, default to false)</param>
    /// <param name="getServicesRequestInner"> (optional)</param>
    pplx::task<std::shared_ptr<Get_services_200_response>> getServices(
        boost::optional<bool> details,
        boost::optional<std::vector<std::shared_ptr<Get_services_request_inner>>> getServicesRequestInner
    ) const override;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* CLOUD_UNIKRAFT_V1_API_ServicesApi_H_ */

