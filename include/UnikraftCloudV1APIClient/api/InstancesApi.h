/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * InstancesApi.h
 *
 * 
 */

#ifndef CLOUD_UNIKRAFT_V1_API_InstancesApi_H_
#define CLOUD_UNIKRAFT_V1_API_InstancesApi_H_



#include "UnikraftCloudV1APIClient/ApiClient.h"

#include "UnikraftCloudV1APIClient/model/Create_instance_200_response.h"
#include "UnikraftCloudV1APIClient/model/Create_instance_request.h"
#include "UnikraftCloudV1APIClient/model/Delete_instances_200_response.h"
#include "UnikraftCloudV1APIClient/model/Delete_instances_request_inner.h"
#include "UnikraftCloudV1APIClient/model/Get_certificates_default_response.h"
#include "UnikraftCloudV1APIClient/model/Get_instance_by_uuid_200_response.h"
#include "UnikraftCloudV1APIClient/model/Get_instance_logs_200_response.h"
#include "UnikraftCloudV1APIClient/model/Get_instance_logs_request_inner.h"
#include "UnikraftCloudV1APIClient/model/Get_instance_metrics_200_response.h"
#include "UnikraftCloudV1APIClient/model/Get_instance_metrics_request_inner.h"
#include "UnikraftCloudV1APIClient/model/Get_instances_200_response.h"
#include "UnikraftCloudV1APIClient/model/Get_instances_request_inner.h"
#include "UnikraftCloudV1APIClient/model/Start_instances_200_response.h"
#include "UnikraftCloudV1APIClient/model/Start_instances_request_inner.h"
#include "UnikraftCloudV1APIClient/model/Stop_instances_request_inner.h"
#include "UnikraftCloudV1APIClient/model/Wait_for_instances_200_response.h"
#include "UnikraftCloudV1APIClient/model/Wait_for_instances_request_inner.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace cloud {
namespace unikraft {
namespace v1 {
namespace api {

using namespace cloud::unikraft::v1::model;

class  IInstancesApi
{
public:
    IInstancesApi() = default;
    virtual ~IInstancesApi() = default;

    virtual pplx::task<std::shared_ptr<Create_instance_200_response>> createInstance(
        std::shared_ptr<Create_instance_request> createInstanceRequest
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Delete_instances_200_response>> deleteInstanceByUuid(
        utility::string_t uuid
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Delete_instances_200_response>> deleteInstances(
        boost::optional<std::vector<std::shared_ptr<Delete_instances_request_inner>>> deleteInstancesRequestInner
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Get_instance_by_uuid_200_response>> getInstanceByUuid(
        utility::string_t uuid,
        boost::optional<bool> details,
        boost::optional<bool> metrics
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Get_instance_logs_200_response>> getInstanceLogs(
        boost::optional<std::vector<std::shared_ptr<Get_instance_logs_request_inner>>> getInstanceLogsRequestInner
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Get_instance_logs_200_response>> getInstanceLogsByUuid(
        utility::string_t uuid
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Get_instance_metrics_200_response>> getInstanceMetrics(
        boost::optional<std::vector<std::shared_ptr<Get_instance_metrics_request_inner>>> getInstanceMetricsRequestInner
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Get_instance_metrics_200_response>> getInstanceMetricsByUuid(
        utility::string_t uuid
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Get_instances_200_response>> getInstances(
        boost::optional<bool> details,
        boost::optional<bool> metrics,
        boost::optional<std::vector<std::shared_ptr<Get_instances_request_inner>>> getInstancesRequestInner
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Start_instances_200_response>> startInstanceByUuid(
        utility::string_t uuid,
        boost::optional<int32_t> waitTimeoutMs
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Start_instances_200_response>> startInstances(
        boost::optional<std::vector<std::shared_ptr<Start_instances_request_inner>>> startInstancesRequestInner
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Start_instances_200_response>> stopInstanceByUuid(
        utility::string_t uuid,
        boost::optional<bool> force,
        boost::optional<int32_t> drainTimeoutMs
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Start_instances_200_response>> stopInstances(
        boost::optional<std::vector<std::shared_ptr<Stop_instances_request_inner>>> stopInstancesRequestInner
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Wait_for_instances_200_response>> waitForInstances(
        boost::optional<std::vector<std::shared_ptr<Wait_for_instances_request_inner>>> waitForInstancesRequestInner
    ) const = 0;
};

class  InstancesApi  : public IInstancesApi 
{
public:
    using Base = IInstancesApi;

    explicit InstancesApi( std::shared_ptr<const ApiClient> apiClient );

    ~InstancesApi() override;

    /// <summary>
    /// Create an instance
    /// </summary>
    /// <remarks>
    /// Creates a new instance of the specified Unikraft Cloud image. You can describe the properties of the new instance such as its startup arguments and amount of memory. Note that the instance properties can only be defined during creation. They cannot be changed later. 
    /// </remarks>
    /// <param name="createInstanceRequest"></param>
    pplx::task<std::shared_ptr<Create_instance_200_response>> createInstance(
        std::shared_ptr<Create_instance_request> createInstanceRequest
    ) const override;
    /// <summary>
    /// Delete a single instance given its UUID
    /// </summary>
    /// <remarks>
    /// Deletes the specified instance. After this call the IDs associated with the instance are no longer valid. A running instance is force stopped. If the instance is an [autoscale master](https://unikraft.cloud/docs/api/v1/autoscale#basics), deleting the instance resets autoscale for the service and deletes all instances created by autoscale. 
    /// </remarks>
    /// <param name="uuid">The UUID of the resource. The UUID is a 36-character string that uniquely identifies the resource. The UUID is returned by the API after creating a resource. </param>
    pplx::task<std::shared_ptr<Delete_instances_200_response>> deleteInstanceByUuid(
        utility::string_t uuid
    ) const override;
    /// <summary>
    /// Delete one or more instances
    /// </summary>
    /// <remarks>
    /// Deletes the specified instance(s). After this call the IDs associated with the instance are no longer valid. A running instance is force stopped. If the instance is an [autoscale master](https://unikraft.cloud/docs/api/v1/autoscale#basics), deleting the instance resets autoscale for the service and deletes all instances created by autoscale. 
    /// </remarks>
    /// <param name="deleteInstancesRequestInner"> (optional)</param>
    pplx::task<std::shared_ptr<Delete_instances_200_response>> deleteInstances(
        boost::optional<std::vector<std::shared_ptr<Delete_instances_request_inner>>> deleteInstancesRequestInner
    ) const override;
    /// <summary>
    /// Get the status of a single instance
    /// </summary>
    /// <remarks>
    /// Returns the current status and the configuration of a particular instance if a UUID or name is specified. Otherwise, returns the current status and configuration of all instances. 
    /// </remarks>
    /// <param name="uuid">The UUID of the resource. The UUID is a 36-character string that uniquely identifies the resource. The UUID is returned by the API after creating a resource. </param>
    /// <param name="details">Whether to provide detailed status and configuration information.  (optional, default to false)</param>
    /// <param name="metrics">Whether to include metrics in the detailed status.  (optional, default to false)</param>
    pplx::task<std::shared_ptr<Get_instance_by_uuid_200_response>> getInstanceByUuid(
        utility::string_t uuid,
        boost::optional<bool> details,
        boost::optional<bool> metrics
    ) const override;
    /// <summary>
    /// Retrieve logs for one or more instances
    /// </summary>
    /// <remarks>
    /// Returns the log output of the specified instance(s) in base64 encoding. Note that the maximum response size is capped. The log output might thus be cut off and require multiple requests to fetch further output. 
    /// </remarks>
    /// <param name="getInstanceLogsRequestInner"> (optional)</param>
    pplx::task<std::shared_ptr<Get_instance_logs_200_response>> getInstanceLogs(
        boost::optional<std::vector<std::shared_ptr<Get_instance_logs_request_inner>>> getInstanceLogsRequestInner
    ) const override;
    /// <summary>
    /// Retrieve logs for an instance given its UUID
    /// </summary>
    /// <remarks>
    /// Returns the log output of the specified instance in base64 encoding. Note that the maximum response size is capped. The log output might thus be cut off and require multiple requests to fetch further output. 
    /// </remarks>
    /// <param name="uuid">The UUID of the resource. The UUID is a 36-character string that uniquely identifies the resource. The UUID is returned by the API after creating a resource. </param>
    pplx::task<std::shared_ptr<Get_instance_logs_200_response>> getInstanceLogsByUuid(
        utility::string_t uuid
    ) const override;
    /// <summary>
    /// Get metrics for one or more instances
    /// </summary>
    /// <remarks>
    /// Returns the various instance(s) metrics like CPU time and network traffic statistics. Cumulative metrics (e.g., used CPU time) are accumulated over instance starts. This endpoint can return either a JSON-encoded response or a response in the Prometheus format. 
    /// </remarks>
    /// <param name="getInstanceMetricsRequestInner"> (optional)</param>
    pplx::task<std::shared_ptr<Get_instance_metrics_200_response>> getInstanceMetrics(
        boost::optional<std::vector<std::shared_ptr<Get_instance_metrics_request_inner>>> getInstanceMetricsRequestInner
    ) const override;
    /// <summary>
    /// Get metrics for an instance given its UUID
    /// </summary>
    /// <remarks>
    /// Returns the various instances metrics like CPU time and network traffic statistics. Cumulative metrics (e.g., used CPU time) are accumulated over instance starts. This endpoint can return either a JSON-encoded response or a response in the Prometheus format. 
    /// </remarks>
    /// <param name="uuid">The UUID of the resource. The UUID is a 36-character string that uniquely identifies the resource. The UUID is returned by the API after creating a resource. </param>
    pplx::task<std::shared_ptr<Get_instance_metrics_200_response>> getInstanceMetricsByUuid(
        utility::string_t uuid
    ) const override;
    /// <summary>
    /// Get the status of one or more instances
    /// </summary>
    /// <remarks>
    /// Returns the current status and the configuration of a particular instance(s) if a UUID or name is specified. Otherwise, returns the current status and configuration of all instances. 
    /// </remarks>
    /// <param name="details">Whether to provide detailed status and configuration information.  (optional, default to false)</param>
    /// <param name="metrics">Whether to include metrics in the detailed status.  (optional, default to false)</param>
    /// <param name="getInstancesRequestInner"> (optional)</param>
    pplx::task<std::shared_ptr<Get_instances_200_response>> getInstances(
        boost::optional<bool> details,
        boost::optional<bool> metrics,
        boost::optional<std::vector<std::shared_ptr<Get_instances_request_inner>>> getInstancesRequestInner
    ) const override;
    /// <summary>
    /// Start an instance given its UUID
    /// </summary>
    /// <remarks>
    /// Starts a stopped instance. Does nothing for an instance that is already running. 
    /// </remarks>
    /// <param name="uuid">The UUID of the resource. The UUID is a 36-character string that uniquely identifies the resource. The UUID is returned by the API after creating a resource. </param>
    /// <param name="waitTimeoutMs">Timeout to wait for all specified instances to reach running state in milliseconds. No wait performed for &#x60;0&#x60;.  (optional, default to 0)</param>
    pplx::task<std::shared_ptr<Start_instances_200_response>> startInstanceByUuid(
        utility::string_t uuid,
        boost::optional<int32_t> waitTimeoutMs
    ) const override;
    /// <summary>
    /// Start one or more instances
    /// </summary>
    /// <remarks>
    /// Starts one or more stopped instance(s). Does nothing for an instance which is already running. 
    /// </remarks>
    /// <param name="startInstancesRequestInner"> (optional)</param>
    pplx::task<std::shared_ptr<Start_instances_200_response>> startInstances(
        boost::optional<std::vector<std::shared_ptr<Start_instances_request_inner>>> startInstancesRequestInner
    ) const override;
    /// <summary>
    /// Stop a single instance given its UUID
    /// </summary>
    /// <remarks>
    /// Stops the specified instance, but does not destroy it. All volatile state (e.g., RAM contents) is lost. Does nothing for an instance that is already stopped. The instance can be started again with the [&#x60;start&#x60;](https://unikraft.cloud/docs/api/v1/instances/#start) endpoint. 
    /// </remarks>
    /// <param name="uuid">The UUID of the resource. The UUID is a 36-character string that uniquely identifies the resource. The UUID is returned by the API after creating a resource. </param>
    /// <param name="force">Forces immediate shutdown.  (optional, default to false)</param>
    /// <param name="drainTimeoutMs">Timeout for draining connections in milliseconds. The instance does not receive new connections in the draining phase. The instance is stopped when the last connection has been closed or the timeout expired.  (optional, default to 0)</param>
    pplx::task<std::shared_ptr<Start_instances_200_response>> stopInstanceByUuid(
        utility::string_t uuid,
        boost::optional<bool> force,
        boost::optional<int32_t> drainTimeoutMs
    ) const override;
    /// <summary>
    /// Stop one or more instances
    /// </summary>
    /// <remarks>
    /// Stops the specified instance(s), but does not destroy it. All volatile state (e.g., RAM contents) is lost. Does nothing for an instance that is already stopped. The instance can be started again with the [&#x60;start&#x60;](https://unikraft.cloud/docs/api/v1/instances/#start) endpoint. 
    /// </remarks>
    /// <param name="stopInstancesRequestInner"> (optional)</param>
    pplx::task<std::shared_ptr<Start_instances_200_response>> stopInstances(
        boost::optional<std::vector<std::shared_ptr<Stop_instances_request_inner>>> stopInstancesRequestInner
    ) const override;
    /// <summary>
    /// Wait for one or more instances to reach a desired state
    /// </summary>
    /// <remarks>
    /// Waits until the specified instance(s) have reached the desired state. The request blocks until all waits in the call are satisfied or the request timed out. 
    /// </remarks>
    /// <param name="waitForInstancesRequestInner"> (optional)</param>
    pplx::task<std::shared_ptr<Wait_for_instances_200_response>> waitForInstances(
        boost::optional<std::vector<std::shared_ptr<Wait_for_instances_request_inner>>> waitForInstancesRequestInner
    ) const override;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* CLOUD_UNIKRAFT_V1_API_InstancesApi_H_ */

