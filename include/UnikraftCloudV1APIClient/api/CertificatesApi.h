/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CertificatesApi.h
 *
 * 
 */

#ifndef CLOUD_UNIKRAFT_V1_API_CertificatesApi_H_
#define CLOUD_UNIKRAFT_V1_API_CertificatesApi_H_



#include "UnikraftCloudV1APIClient/ApiClient.h"

#include "UnikraftCloudV1APIClient/model/Create_certificate_200_response.h"
#include "UnikraftCloudV1APIClient/model/Create_certificate_request.h"
#include "UnikraftCloudV1APIClient/model/Delete_certificate_by_uuid_200_response.h"
#include "UnikraftCloudV1APIClient/model/Delete_certificates_200_response.h"
#include "UnikraftCloudV1APIClient/model/Delete_certificates_request_inner.h"
#include "UnikraftCloudV1APIClient/model/Get_certificate_by_uuid_200_response.h"
#include "UnikraftCloudV1APIClient/model/Get_certificates_200_response.h"
#include "UnikraftCloudV1APIClient/model/Get_certificates_default_response.h"
#include "UnikraftCloudV1APIClient/model/Get_certificates_request_inner.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace cloud {
namespace unikraft {
namespace v1 {
namespace api {

using namespace cloud::unikraft::v1::model;

class  ICertificatesApi
{
public:
    ICertificatesApi() = default;
    virtual ~ICertificatesApi() = default;

    virtual pplx::task<std::shared_ptr<Create_certificate_200_response>> createCertificate(
        std::shared_ptr<Create_certificate_request> createCertificateRequest
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Delete_certificate_by_uuid_200_response>> deleteCertificateByUuid(
        utility::string_t uuid
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Delete_certificates_200_response>> deleteCertificates(
        boost::optional<std::vector<std::shared_ptr<Delete_certificates_request_inner>>> deleteCertificatesRequestInner
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Get_certificate_by_uuid_200_response>> getCertificateByUuid(
        utility::string_t uuid,
        boost::optional<bool> details
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Get_certificates_200_response>> getCertificates(
        boost::optional<bool> details,
        boost::optional<std::vector<std::shared_ptr<Get_certificates_request_inner>>> getCertificatesRequestInner
    ) const = 0;
};

class  CertificatesApi  : public ICertificatesApi 
{
public:
    using Base = ICertificatesApi;

    explicit CertificatesApi( std::shared_ptr<const ApiClient> apiClient );

    ~CertificatesApi() override;

    /// <summary>
    /// Upload a certificate
    /// </summary>
    /// <remarks>
    /// Create a new certificate object and upload an existing certificate chain and private key. 
    /// </remarks>
    /// <param name="createCertificateRequest"></param>
    pplx::task<std::shared_ptr<Create_certificate_200_response>> createCertificate(
        std::shared_ptr<Create_certificate_request> createCertificateRequest
    ) const override;
    /// <summary>
    /// Delete a single certificate given its UUID
    /// </summary>
    /// <remarks>
    /// Deletes the specified certificate. Fails if the certificate is still attached to a service. After this call the IDs associated with the certificate are no longer valid. 
    /// </remarks>
    /// <param name="uuid">The UUID of the resource. The UUID is a 36-character string that uniquely identifies the resource. The UUID is returned by the API after creating a resource. </param>
    pplx::task<std::shared_ptr<Delete_certificate_by_uuid_200_response>> deleteCertificateByUuid(
        utility::string_t uuid
    ) const override;
    /// <summary>
    /// Delete one or more certificates
    /// </summary>
    /// <remarks>
    /// Deletes the specified certificate(s). Fails if the certificate is still attached to a service. After this call the IDs associated with the certificate are no longer valid. 
    /// </remarks>
    /// <param name="deleteCertificatesRequestInner"> (optional)</param>
    pplx::task<std::shared_ptr<Delete_certificates_200_response>> deleteCertificates(
        boost::optional<std::vector<std::shared_ptr<Delete_certificates_request_inner>>> deleteCertificatesRequestInner
    ) const override;
    /// <summary>
    /// Get the status of a certificate given its UUID
    /// </summary>
    /// <remarks>
    /// Returns the current status and the properties of a certificate. 
    /// </remarks>
    /// <param name="uuid">The UUID of the resource. The UUID is a 36-character string that uniquely identifies the resource. The UUID is returned by the API after creating a resource. </param>
    /// <param name="details">Whether to provide detailed status and configuration information.  (optional, default to false)</param>
    pplx::task<std::shared_ptr<Get_certificate_by_uuid_200_response>> getCertificateByUuid(
        utility::string_t uuid,
        boost::optional<bool> details
    ) const override;
    /// <summary>
    /// Get the status of one or more certificates
    /// </summary>
    /// <remarks>
    /// Returns the current status and the properties of specified certificate(s). 
    /// </remarks>
    /// <param name="details">Whether to provide detailed status and configuration information.  (optional, default to false)</param>
    /// <param name="getCertificatesRequestInner"> (optional)</param>
    pplx::task<std::shared_ptr<Get_certificates_200_response>> getCertificates(
        boost::optional<bool> details,
        boost::optional<std::vector<std::shared_ptr<Get_certificates_request_inner>>> getCertificatesRequestInner
    ) const override;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* CLOUD_UNIKRAFT_V1_API_CertificatesApi_H_ */

