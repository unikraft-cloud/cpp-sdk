/**
 * Unikraft Cloud Platform
 * This is the API of the Unikraft Cloud Platform. 
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: info@unikraft.cloud
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * VolumesApi.h
 *
 * 
 */

#ifndef CLOUD_UNIKRAFT_V1_API_VolumesApi_H_
#define CLOUD_UNIKRAFT_V1_API_VolumesApi_H_



#include "UnikraftCloudV1APIClient/ApiClient.h"

#include "UnikraftCloudV1APIClient/model/Create_volumes_200_response.h"
#include "UnikraftCloudV1APIClient/model/Create_volumes_request_inner.h"
#include "UnikraftCloudV1APIClient/model/Delete_volumes_200_response.h"
#include "UnikraftCloudV1APIClient/model/Delete_volumes_request_inner.h"
#include "UnikraftCloudV1APIClient/model/Get_certificates_default_response.h"
#include "UnikraftCloudV1APIClient/model/Get_volumes_200_response.h"
#include "UnikraftCloudV1APIClient/model/Get_volumes_request_inner.h"
#include <vector>
#include <boost/optional.hpp>

namespace cloud {
namespace unikraft {
namespace v1 {
namespace api {

using namespace cloud::unikraft::v1::model;

class  IVolumesApi
{
public:
    IVolumesApi() = default;
    virtual ~IVolumesApi() = default;

    virtual pplx::task<std::shared_ptr<Create_volumes_200_response>> createVolumes(
        std::vector<std::shared_ptr<Create_volumes_request_inner>> createVolumesRequestInner
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Delete_volumes_200_response>> deleteVolumes(
        boost::optional<std::vector<std::shared_ptr<Delete_volumes_request_inner>>> deleteVolumesRequestInner
    ) const = 0;
    virtual pplx::task<std::shared_ptr<Get_volumes_200_response>> getVolumes(
        boost::optional<bool> details,
        boost::optional<std::vector<std::shared_ptr<Get_volumes_request_inner>>> getVolumesRequestInner
    ) const = 0;
};

class  VolumesApi  : public IVolumesApi 
{
public:
    using Base = IVolumesApi;

    explicit VolumesApi( std::shared_ptr<const ApiClient> apiClient );

    ~VolumesApi() override;

    /// <summary>
    /// Create one or more persistent volumes
    /// </summary>
    /// <remarks>
    /// Creates one or more volumes with the given configuration. The volumes are automatically initialized with an empty file system. After initialization the volumes are in the &#x60;available&#x60; state and can be attached to an instance with the [&#x60;PUT /v1/volumes/attach&#x60;](https://unikraft.cloud/docs/api/v1/volumes/#attach) endpoint. Note that, the size of a volume cannot be changed after creation. 
    /// </remarks>
    /// <param name="createVolumesRequestInner"></param>
    pplx::task<std::shared_ptr<Create_volumes_200_response>> createVolumes(
        std::vector<std::shared_ptr<Create_volumes_request_inner>> createVolumesRequestInner
    ) const override;
    /// <summary>
    /// Delete one or more persistent volumes
    /// </summary>
    /// <remarks>
    /// Deletes the specified volume(s). Fails if the volume is still attached to an instance. After this call the IDs associated with the volume are no longer valid. 
    /// </remarks>
    /// <param name="deleteVolumesRequestInner"> (optional)</param>
    pplx::task<std::shared_ptr<Delete_volumes_200_response>> deleteVolumes(
        boost::optional<std::vector<std::shared_ptr<Delete_volumes_request_inner>>> deleteVolumesRequestInner
    ) const override;
    /// <summary>
    /// Get the status of one or more persistent volumes
    /// </summary>
    /// <remarks>
    /// Returns the current status and the configuration of a particular volume if a UUID or name is specified. Otherwise, returns the current status and configuration of all volumes. 
    /// </remarks>
    /// <param name="details">Whether to provide detailed status and configuration information.  (optional, default to false)</param>
    /// <param name="getVolumesRequestInner"> (optional)</param>
    pplx::task<std::shared_ptr<Get_volumes_200_response>> getVolumes(
        boost::optional<bool> details,
        boost::optional<std::vector<std::shared_ptr<Get_volumes_request_inner>>> getVolumesRequestInner
    ) const override;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* CLOUD_UNIKRAFT_V1_API_VolumesApi_H_ */

